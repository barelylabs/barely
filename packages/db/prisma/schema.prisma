generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

generator zod {
  provider = "prisma-generator-zod"
  output   = "../../schema/db"
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

//* 💁‍♂️ users 💁‍♂️ *//

model User {
  id                  String                 @id @default(cuid())
  type                UserType
  firstName           String?
  lastName            String?
  emailVerified       DateTime?
  handle              String?
  displayName         String?
  email               String?                @unique /// @zod.email()
  phone               String?
  image               String?
  marketing           Boolean                @default(false)
  // collabs
  teams               Team[]
  collaborators       CollaboratorRole[]     @relation("CollaboratorRoleUser")
  collaboratorFor     CollaboratorRole[]     @relation("CollaboratoreRoleCollaborator")
  // transactions
  stripeId            String?
  transactions        Transaction[]
  // external accounts
  accounts            Account[]              @relation("UserAccount")
  defaultAccounts     Account[]              @relation("UserDefaultAccount")
  spotifyId           String?                @unique
  // assets
  files               File[]
  tracks              Track[]
  playlists           Playlist[]
  // campaigns
  pitchReviews        PitchReview[]
  campaignsCreated    Campaign[]
  campaignUpdates     CampaignUpdateRecord[]
  adCreatives         AdCreative[]
  audiences           Audience[]
  // links
  links               Link[]
  socialLinks         SocialLink[]
  externalWebsites    ExternalWebsite[]
  analyticsEndpoints  AnalyticsEndpoint[]
  // bio
  bios                Bio[]                  @relation("UserBio")
  rootBio             Bio?                   @relation("UserRootBio")
  buttons             Button[]
  forms               Form[]
  // dev
  epicsCreated        Epic[]                 @relation("EpicCreatedByUser")
  epicsAssigned       Epic[]                 @relation("EpicAssignedToUser")
  epicsForUser        Epic[]                 @relation("EpicForUser")
  storyBoardsCreated  StoryBoard[]           @relation("BoardCreatedByUser")
  storyBoardsAssigned StoryBoard[]           @relation("BoardAssignedToUsers")
  storiesCreated      Story[]                @relation("StoryCreatedByUser")
  storiesAssigned     Story[]                @relation("StoryAssignedToUser")
  storiesForUser      Story[]                @relation("StoryForUser")
  tasksCreated        Task[]                 @relation("TaskCreatedByUser")
  tasksAssigned       Task[]                 @relation("TaskAssignedToUser")

  @@unique([id, handle])
}

enum UserType {
  label
  artist
  creator
  influencer
  marketer
}

model Team {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  users     User[]
}

model CollaboratorRole {
  user             User                   @relation("CollaboratorRoleUser", fields: [userId], references: [id])
  userId           String
  collaborator     User                   @relation("CollaboratoreRoleCollaborator", fields: [collaboratorId], references: [id])
  collaboratorId   String
  collaboratorRole CollaboratorRoleOption

  @@id([userId, collaboratorId])
  @@index([userId])
  @@index([collaboratorId])
}

enum CollaboratorRoleOption {
  admin
  marketing
}

//* 📲 external accounts 📲 *//

enum AccountPlatform {
  discord
  facebook
  facebookPage
  github
  google
  metaAd
  metaBusiness
  spotify
  tiktok
  twitch
  twitter
  whatsapp
}

enum OAuthProvider {
  discord
  facebook
  google
  spotify
  tiktok
}

model Account {
  id             String          @id
  platform       AccountPlatform @default(spotify)
  provider       OAuthProvider?
  providerUserId String?
  email          String?
  approvedScopes Json? // @zod.array(zod.string())
  avatarUrl      String?
  username       String?

  accessToken String?

  parentAccount   Account?  @relation("AccountParentChild", fields: [parentAccountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentAccountId String?
  childAccounts   Account[] @relation("AccountParentChild")

  user             User    @relation("UserAccount", fields: [userId], references: [id])
  userId           String
  defaultFor       User?   @relation("UserDefaultAccount", fields: [defaultForUserId], references: [id])
  defaultForUserId String?

  // assets
  playlists         PlaylistAccount[]
  metaAdCreative    AdCreative[]      @relation("AdCreativeMetaAccount")
  metaAdCampaigns   AdCampaign[]      @relation("AdCampaignMetaAccount")
  tikTokAdCreative  AdCreative[]      @relation("AdCreativeTikTokAccount")
  tikTokAdCampaigns AdCampaign[]      @relation("AdCampaignTikTokAccount")

  stats Stat[]

  @@unique([provider, providerUserId])
  @@unique([id, platform])
  @@index([userId])
  @@index([parentAccountId])
  @@index([defaultForUserId])
}

//* 🔗 links 🔗 *// 

model Link {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  // user
  user          User?         @relation(fields: [userId, handle], references: [id, handle])
  userId        String?
  userSocial    SocialLink?
  // trigger
  handle        String // from user 👆
  domain        LinkDomain    @default(barely)
  slug          String?
  app           AppType? // 
  appRoute      String?
  appId         String?
  // target
  url           String        @db.VarChar(1000)
  appleScheme   String?       @db.VarChar(1000)
  androidScheme String?       @db.VarChar(1000)
  // metadata
  ogTitle       String?
  ogDescription String?
  ogImage       String?
  favicon       String?
  // qr
  qrLight       String?       @default("white")
  qrDark        String?       @default("black")
  qrText        String?       @default("black")
  qrLogo        String?
  // assets
  trackApp      TrackAppLink? @relation("TrackAppLink")
  playlist      Playlist?     @relation("PlaylistLink")
  // bio
  bio           Bio?          @relation("LinkToBio", fields: [bioId], references: [id])
  bioId         String?       @unique
  buttons       Button[]
  // short -> app link
  shortLink     Link?         @relation("ShortToAppLink")
  appLink       Link?         @relation("ShortToAppLink", fields: [appLinkId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  appLinkId     String?       @unique
  // ads
  adCreatives   AdCreative[]
  // events    
  events        Event[]

  delete Boolean? @default(false)

  @@unique([id, app])
  @@unique([handle, domain, app, slug])
  @@index([userId, handle])
}

enum AppType {
  appleMusic
  email
  facebook
  instagram
  patreon
  snapchat
  spotify
  tiktok
  twitch
  twitter
  web
  whatsapp
  youtube
}

enum LinkDomain {
  barely
  brl
}

model SocialLink {
  user    User    @relation(fields: [userId], references: [id])
  userId  String
  link    Link    @relation(fields: [linkId, linkApp], references: [id, app])
  linkApp AppType
  linkId  String
  display Boolean @default(true)

  @@id([userId, linkApp, linkId])
  @@unique([userId, linkApp])
  @@unique([linkId, linkApp])
}

model AnalyticsEndpoint {
  id           String
  user         User?             @relation(fields: [userId], references: [id])
  userId       String?
  platform     AnalyticsPlatform
  accessToken  String? // ideally this won't be needed
  eventReports EventReport[]

  @@id([platform, id])
  @@unique([userId, platform, id])
  @@index([userId])
}

enum AnalyticsPlatform {
  meta
  google
  tiktok
  snapchat
}

//* 👩‍🎤 bio 👩‍🎤 *//

model Bio {
  id                String       @id @default(cuid())
  createdAt         DateTime     @default(now())
  // user  
  user              User         @relation("UserBio", fields: [userId, handle], references: [id, handle])
  userId            String
  rootForUser       User?        @relation("UserRootBio", fields: [rootForUserId], references: [id])
  rootForUserId     String?      @unique
  // 🔗 trigger [handle].barely.bio/[route || slug]/[slug?]
  handle            String // handle pulled from user 👆  
  route             String?
  slug              String?
  // 🔗 alias ([handle].brl.to/[slug] -> [handle].barely.bio/[...path])
  link              Link?        @relation("LinkToBio")
  // analytics
  events            Event[]
  // header
  img               String?
  imgShape          BioImgShape?
  title             String?
  subtitle          String?
  titleColor        String?
  // buttons
  buttons           BioButton[]
  buttonColor       String?
  iconColor         String?
  textColor         String?
  // social - buttons pulled from Artist    
  socialDisplay     Boolean
  socialButtonColor String?
  socialIconColor   String?
  // style
  theme             BioTheme
  barelyBranding    Boolean      @default(true)

  @@unique([userId, route, slug])
  @@index([userId])
  @@index([handle])
  @@index([userId, handle])
}

enum BioTheme {
  light
  dark
  app
}

enum BioImgShape {
  square
  circle
  rounded
}

model Button {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  text        String?
  buttonColor String?
  textColor   String?
  // bio
  bios        BioButton[]
  // events    
  link        Link?       @relation(fields: [linkId], references: [id])
  linkId      String?
  form        Form?       @relation(fields: [formId], references: [id])
  formId      String?
  email       String?     @db.VarChar(1000) /// @zod.email()
  phone       String?

  @@index([formId])
  @@index([userId])
  @@index([linkId])
}

model BioButton {
  bio            Bio     @relation(fields: [bioId], references: [id])
  bioId          String
  button         Button  @relation(fields: [buttonId], references: [id])
  buttonId       String
  lexoRank       String
  buttonLexoRank String
  events         Event[]

  @@id([bioId, buttonId])
  @@index([bioId])
  @@index([buttonId])
}

model Form {
  id              String       @id @default(cuid())
  platform        FormPlatform
  // standard
  title           String?
  subtitle        String?
  messagePrompt   String?
  forwardingEmail String /// @zod.email()
  forwardingCc    String // comma separated
  // toggles
  inputName       Boolean
  inputEmail      Boolean
  inputPhone      Boolean
  inputMessage    Boolean

  events    Event[]
  buttons   Button[]
  responses FormResponse[]

  user     User    @relation(fields: [userId], references: [id])
  userId   String
  artistId String?

  @@index([userId])
}

enum FormPlatform {
  bio
  meta
}

model FormResponse {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  form    Form    @relation(fields: [formId], references: [id])
  formId  String
  name    String?
  email   String? /// @zod.email()
  phone   String?
  message String?

  @@index([formId])
}

//* 🏄 campaigns 🏄 *//

model Campaign {
  id           String                 @id @default(cuid())
  createdAt    DateTime               @default(now())
  type         CampaignType
  stage        CampaignStage
  endDate      DateTime?
  // user
  createdBy    User                   @relation(fields: [createdById], references: [id])
  createdById  String
  // promoting
  track        Track                  @relation(fields: [trackId], references: [id])
  trackId      String
  playlist     Playlist?              @relation(fields: [playlistId], references: [id])
  playlistId   String?
  // ads
  adCampaigns  AdCampaign[]
  // results
  pitchReviews PitchReview[]
  updates      CampaignUpdateRecord[]
  // transaction
  lineItems    LineItem[]

  @@index([createdById])
  @@index([trackId])
  @@index([playlistId])
}

enum CampaignType {
  // pitch
  playlistPitch
  // spark
  fbSpark
  igSpark
  tiktokSpark
  playlistSpark
  gigSpark
  // charge
  fbCharge
  igCharge
  spotifyCharge
}

enum CampaignStage {
  // pitch
  screening
  rejectedForCampaign
  approvedForCampaign
  // ads
  queuedForTesting
  errorInTestingQueue
  testing
  testingComplete
  // all
  running
  paused
  complete
}

model CampaignUpdateRecord {
  id                               String         @id @default(cuid())
  createdAt                        DateTime       @default(now())
  createdBy                        User           @relation(fields: [createdById], references: [id])
  createdById                      String
  campaign                         Campaign       @relation(fields: [campaignId], references: [id])
  campaignId                       String
  // changes
  stage                            CampaignStage?
  dailyBudget                      Decimal?       @db.Decimal(10, 2)
  triggerFraction                  Decimal?       @db.Decimal(10, 1)
  // projections
  projectedCostPerMetric           Decimal?       @db.Decimal(10, 3)
  projectedMonthlyMetric           Int?
  projectedMonthlyAdSpend          Int?
  projectedMonthlyMaintenanceSpend Int?
  projectedMonthlyTotalSpend       Int?
  projectedMonthlyRevenue          Int?
  projectedMonthlyNet              Int?

  @@index([campaignId])
  @@index([createdById])
}

//* 📢 pitch campaigns 📢 *//

model PitchReview {
  id           String           @id @default(cuid())
  createdAt    DateTime         @default(now())
  campaign     Campaign         @relation(fields: [campaignId], references: [id])
  campaignId   String
  // review
  reviewer     User             @relation(fields: [reviewerId], references: [id])
  reviewerId   String
  // 
  stage        PitchReviewStage
  expiresAt    DateTime
  review       String           @db.LongText
  rating       Int
  rejectReason String?
  placements   Placement[]

  @@index([campaignId])
  @@index([reviewerId])
}

enum PitchReviewStage {
  reviewing
  placed
  rejected
  expired
}

model Placement {
  id               String      @id @default(cuid())
  createdAt        DateTime    @default(now())
  pitchReview      PitchReview @relation(fields: [pitchReviewId], references: [id])
  pitchReviewId    String
  // placement
  addToPlaylist    Boolean?
  addedToPlaylist  Boolean?
  playlist         Playlist?   @relation(fields: [playlistId], references: [id])
  playlistId       String?
  playlistPosition Int?
  addDate          DateTime?
  daysInPlaylist   Int?
  removeDate       DateTime?

  @@index([pitchReviewId])
  @@index([playlistId])
}

//* 📺 ad campaigns 📺 *//

model AdCampaign {
  id                       String                @id @default(cuid())
  name                     String
  createdAt                DateTime              @default(now())
  // campaign   
  campaign                 Campaign              @relation(fields: [campaignId], references: [id])
  campaignId               String
  // dates
  startDate                DateTime
  endDate                  DateTime?
  // account
  metaAdAccount            Account               @relation("AdCampaignMetaAccount", fields: [metaAdAccountId], references: [id])
  metaAdAccountId          String
  tikTokAdAccount          Account               @relation("AdCampaignTikTokAccount", fields: [tikTokAdAccountId], references: [id])
  tikTokAdAccountId        String
  // id
  metaId                   String?
  tikTokId                 String?
  // daily budget
  metaDailyBudget          Int?
  tikTokDailyBudget        Int?
  // lifetime budget
  totalLifetimeBudget      Int?
  metaLifetimeBudget       Int?
  tikTokLifetimeBudget     Int?
  // trigger fraction
  metaTriggerFraction      Decimal?              @db.Decimal(10, 1)
  tikTokTriggerFraction    Decimal?              @db.Decimal(10, 1)
  // testing
  testDemos                Demo[]
  testGeoGroups            GeoGroup[]
  testInterestGroups       InterestGroup[]
  testHeadlines            Headline[]
  testVidRenders           VidRender[]
  testTrackRenders         TrackRender[]
  testPlaylistCoverRenders PlaylistCoverRender[]
  // splitTest
  splitTestDemos           Boolean               @default(false)
  splitTestGeoGroups       Boolean               @default(false)
  splitTestInterestGroups  Boolean               @default(false)
  // children
  adSets                   AdSet[]
  // state    
  status                   AdStatus

  @@index([campaignId])
  @@index([metaAdAccountId])
  @@index([tikTokAdAccountId])
}

enum AdStatus {
  ACTIVE
  PAUSED
  ERROR
}

model AdSet {
  id                  String              @id @default(cuid())
  createdAt           DateTime            @default(now())
  // ad campaign
  adCampaign          AdCampaign          @relation(fields: [adCampaignId], references: [id])
  adCampaignId        String
  // targeting
  audience            Audience            @relation(fields: [audienceId], references: [id])
  audienceId          String
  //children
  ads                 Ad[]
  // update
  updates             AdSetUpdateRecord[]
  // clone
  parentAdSetForClone AdSetClone[]        @relation("ParentAdSetForClone")
  childAdSetFromClone AdSetClone[]        @relation("ChildAdSetFromClone")
  // id
  metaId              String?
  tikTokId            String?
  // facebook
  fbFeed              Boolean // feed
  fbVideoFeeds        Boolean // video_feeds
  fbMarketplace       Boolean // marketplace
  fbStories           Boolean // story
  // instagram
  igFeed              Boolean // stream
  igStories           Boolean // story
  igReels             Boolean // reels
  // tiktok
  tiktokFeed          Boolean
  // state
  metaStatus          AdStatus
  tikTokStatus        AdStatus

  @@index([adCampaignId])
  @@index([audienceId])
}

model AdSetUpdateRecord {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  adSet          AdSet     @relation(fields: [adSetId], references: [id])
  adSetId        String
  // action    
  metaComplete   Boolean?
  tiktokComplete Boolean?
  // props
  status         AdStatus
  dailyBudget    Decimal?  @db.Decimal(10, 2)
  audience       Audience? @relation(fields: [audienceId], references: [id])
  audienceId     String?

  @@index([adSetId])
  @@index([audienceId])
}

model AdSetClone {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  parentAdSet    AdSet     @relation("ParentAdSetForClone", fields: [parentAdSetId], references: [id])
  parentAdSetId  String
  // action    
  meta           Boolean
  metaComplete   Boolean
  tiktok         Boolean
  tiktokComplete Boolean
  // props
  status         AdStatus
  dailyBudget    Decimal?  @db.Decimal(10, 2)
  audience       Audience? @relation(fields: [audienceId], references: [id])
  audienceId     String?
  // clone
  clonedAdSet    AdSet?    @relation("ChildAdSetFromClone", fields: [clonedAdSetId], references: [id])
  clonedAdSetId  String?

  @@index([parentAdSetId])
  @@index([audienceId])
  @@index([clonedAdSetId])
}

model AdCreative {
  id               String    @id @default(cuid())
  name             String
  createdAt        DateTime  @default(now())
  user             User      @relation(fields: [userId], references: [id])
  userId           String
  // account
  metaAccount      Account   @relation("AdCreativeMetaAccount", fields: [metaAccountId], references: [id])
  metaAccountId    String
  tikTokAccount    Account?  @relation("AdCreativeTikTokAccount", fields: [tikTokAccountId], references: [id])
  tikTokAccountId  String?
  // id
  metaId           String?
  metaPostId       String?
  tikTokId         String?
  // creative
  headline         Headline? @relation(fields: [headlineId], references: [id])
  headlineId       String?
  vids             File[]
  callToActionType String?
  link             Link      @relation(fields: [linkId], references: [id])
  linkId           String
  linkCaption      String?
  urlTags          String?
  // children
  ads              Ad[]

  @@index([userId])
  @@index([metaAccountId])
  @@index([tikTokAccountId])
  @@index([headlineId])
  @@index([linkId])
}

model Headline {
  id              String       @id @default(cuid())
  createdAt       DateTime     @default(now())
  headline        String
  adCreatives     AdCreative[]
  adCampaignTests AdCampaign[]
}

model Ad {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  // ad set
  adSet      AdSet      @relation(fields: [adSetId], references: [id])
  adSetId    String
  // id
  metaId     String?
  tikTokId   String?
  // creative
  creative   AdCreative @relation(fields: [creativeId], references: [id])
  creativeId String
  // state
  status     AdStatus
  passedTest Boolean?

  stats Stat[]

  @@index([adSetId])
  @@index([creativeId])
}

//* 🎯 targeting 🎯 *//

model Audience {
  id                     String          @id @default(cuid())
  createdAt              DateTime        @default(now())
  name                   String?
  user                   User?           @relation(fields: [userId], references: [id])
  userId                 String?
  // demo
  demo                   Demo            @relation(fields: [demoId], references: [id])
  demoId                 String
  // geo
  geoGroups              GeoGroup[]
  // interests    
  includeInterestGroups  InterestGroup[] @relation("TargetIncludeInterestGroups")
  excludeInterestGroups  InterestGroup[] @relation("TargetExcludeInterestGroups")
  // custom
  includeVidViewsGroups  VidViewsGroup[] @relation("TargetIncludeVidViewsGroup")
  excludeVidViewsGroups  VidViewsGroup[] @relation("TargetExcludeVidViewsGroup")
  // meta
  metaId                 String?
  metaAudienceLowerBound Int?
  metaAudienceUpperBound Int?
  // tiktok
  tikTokId               String?

  adSets          AdSet[]
  forAdSetClones  AdSetClone[]
  forAdSetUpdates AdSetUpdateRecord[]

  @@index([userId])
  @@index([demoId])
}

model Demo {
  id          String       @id @default(cuid())
  name        String
  ageMin      Int          @default(18)
  ageMax      Int
  gender      Gender
  onlyEnglish Boolean
  audiences   Audience[]
  adCampaigns AdCampaign[]
}

enum Gender {
  male
  female
  all
}

model GeoGroup {
  id              String       @id @default(cuid())
  name            String
  countries       Country[]
  audiences       Audience[]
  adCampaignTests AdCampaign[]
}

model Country {
  id                     String           @id
  name                   String
  code                   String
  color                  CountryColorCode
  trigger                Boolean
  metaAudienceLowerBound Int?
  metaAudienceUpperBound Int?
  geoGroups              GeoGroup[]
}

enum CountryColorCode {
  red
  orange
  yellow
  green
}

model InterestGroup {
  id          String       @id @default(cuid())
  name        String
  interests   Interest[]
  includeIn   Audience[]   @relation("TargetIncludeInterestGroups")
  excludeIn   Audience[]   @relation("TargetExcludeInterestGroups")
  adCampaigns AdCampaign[]
}

model Interest {
  id                     String          @id @default(cuid())
  name                   String
  interestGroups         InterestGroup[]
  // meta
  metaId                 String
  metaTopic              String
  metaAudienceLowerBound Int
  metaAudienceUpperBound Int
}

model VidViewsGroup {
  id                     String              @id @default(cuid())
  name                   String
  vids                   File[]
  metric                 VidViewsMetric
  retention              EngagementRetention
  includeInAudiences     Audience[]          @relation("TargetIncludeVidViewsGroup")
  excludeInAudiences     Audience[]          @relation("TargetExcludeVidViewsGroup")
  // meta
  metaId                 String
  metaName               String
  metaAudienceLowerBound Int
  metaAudienceUpperBound Int
  tiktokId               String
  tiktokName             String
}

enum VidViewsMetric {
  view_1s
  view_15s
  view_60s
}

enum EngagementRetention {
  day_1
  day_3
  day_7
  day_30
  day_365
}

//* 📈 analytics 📈 *//

model VisitorSession {
  id                String           @id @default(cuid())
  createdAt         DateTime         @default(now())
  events            Event[]
  externalWebsite   ExternalWebsite? @relation(fields: [externalWebsiteId], references: [id])
  externalWebsiteId String?
  // user - device
  browserName       String?
  browserVersion    String?
  cpu               String?
  deviceModel       String?
  deviceType        String?
  deviceVendor      String?
  ip                String? // to be anonymized in the future (1d? 1w?)
  isBot             Boolean?
  osName            String?
  osVersion         String?
  referrer          String?
  ua                String?
  // user - geo
  city              String?
  country           String?
  latitude          String?
  longitude         String?
  region            String?

  @@index([externalWebsiteId])
}

model Event {
  id        Int            @id @default(autoincrement())
  type      EventType
  createdAt DateTime       @default(now())
  // link
  link      Link?          @relation(fields: [linkId], references: [id])
  linkId    String?
  // bio
  bio       Bio?           @relation(fields: [bioId], references: [id])
  bioId     String?
  bioButton BioButton?     @relation(fields: [bioId, buttonId], references: [bioId, buttonId])
  buttonId  String?
  // form
  form      Form?          @relation(fields: [formId], references: [id])
  formId    String?
  // analytics    
  session   VisitorSession @relation(fields: [sessionId], references: [id])
  sessionId String

  eventReports EventReport[]

  @@index([bioId])
  @@index([bioId, buttonId])
  @@index([formId])
  @@index([sessionId])
  @@index([linkId])
}

enum EventType {
  pageView
  linkClick
  formOpen
  formSubmit
  presaveSpotifyOpen
  presaveSpotifyComplete
}

model EventReport {
  createdAt         DateTime          @default(now())
  // event
  event             Event             @relation(fields: [eventId], references: [id])
  eventId           Int
  // report
  analyticsEndpoint AnalyticsEndpoint @relation(fields: [analyticsPlatform, analyticsId], references: [platform, id])
  analyticsPlatform AnalyticsPlatform
  analyticsId       String
  // 
  error             String?           @db.VarChar(1000)

  @@id([eventId, analyticsPlatform, analyticsId])
  @@index([eventId])
  @@index([analyticsPlatform, analyticsId])
}

model ExternalWebsite {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  name            String
  // 
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  artistId        String?
  visitorSessions VisitorSession[]

  @@index([userId])
}

model Stat {
  id           String   @id @default(cuid())
  date         DateTime
  listeners    Int?
  streams      Int?
  likes        Int?
  saves        Int?
  followers    Int?
  newFollowers Int?

  spend       Decimal? @db.Decimal(10, 2)
  clicks      Int?
  impressions Int?

  views    Int?
  watch25  Int?
  watch50  Int?
  watch75  Int?
  watch95  Int?
  watch100 Int?
  watch60s Int?

  // stats for:  
  ad                Ad?                @relation(fields: [adId], references: [id])
  adId              String?
  account           Account?           @relation(fields: [accountId], references: [id])
  accountId         String?
  playlist          Playlist?          @relation(fields: [playlistId], references: [id])
  playlistId        String?
  track             Track?             @relation(fields: [trackId], references: [id])
  trackId           String?
  streamingPlatform StreamingPlatform?

  @@index([adId])
  @@index([accountId])
  @@index([playlistId])
  @@index([trackId])
}

enum StreamingPlatform {
  appleMusic
  spotify
  youtube
}

//* 🧰 dev 🧰 *//
model Epic {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())
  name               String
  description        String?
  targetStartDate    DateTime?
  targetCompleteDate DateTime?
  startDate          DateTime?
  color              String?
  complete           Boolean?  @default(false)
  lexoRank           String
  // users 
  createdBy          User      @relation("EpicCreatedByUser", fields: [createdById], references: [id])
  createdById        String
  assignedTo         User      @relation("EpicAssignedToUser", fields: [assignedToId], references: [id])
  assignedToId       String
  forUser            User?     @relation("EpicForUser", fields: [forUserId], references: [id])
  forUserId          String?
  // children
  stories            Story[]

  @@index([createdById])
  @@index([assignedToId])
  @@index([forUserId])
}

model Story {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  name        String?
  description String?
  dueDate     DateTime?
  lexoRank    String
  priority    String?

  createdBy    User        @relation("StoryCreatedByUser", fields: [createdById], references: [id])
  createdById  String
  assignedTo   User?       @relation("StoryAssignedToUser", fields: [assignedToId], references: [id])
  assignedToId String?
  forUser      User?       @relation("StoryForUser", fields: [forUserId], references: [id])
  forUserId    String?
  epic         Epic?       @relation(fields: [epicId], references: [id])
  epicId       String?
  column       StoryColumn @relation(fields: [columnId], references: [id])
  columnId     String

  update StoryUpdateRecord[]
  tasks  Task[]

  @@index([createdById])
  @@index([assignedToId])
  @@index([forUserId])
  @@index([epicId])
  @@index([columnId])
}

model StoryBoard {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  createdBy   User     @relation("BoardCreatedByUser", fields: [createdById], references: [id])
  createdById String
  members     User[]   @relation("BoardAssignedToUsers")

  color   String?
  columns StoryColumn[]

  @@unique([name, createdById])
  @@index([createdById])
}

model StoryColumn {
  id           String              @id @default(cuid())
  name         String
  board        StoryBoard          @relation(fields: [boardId], references: [id])
  boardId      String
  lexoRank     String
  stories      Story[]
  prevStoryFor StoryUpdateRecord[] @relation("StoryUpdatePrevColumn")
  newStoryFor  StoryUpdateRecord[] @relation("StoryUpdateNewColumn")

  @@unique([name, boardId])
  @@index([boardId])
}

model StoryUpdateRecord {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  story        Story        @relation(fields: [storyId], references: [id])
  storyId      String
  prevColumn   StoryColumn? @relation("StoryUpdatePrevColumn", fields: [prevColumnId], references: [id])
  prevColumnId String?
  newColumn    StoryColumn? @relation("StoryUpdateNewColumn", fields: [newColumnId], references: [id])
  newColumnId  String?

  @@index([storyId])
  @@index([prevColumnId])
  @@index([newColumnId])
}

model Task {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  name        String
  description String?
  dueDate     DateTime?
  lexoRank    String
  priority    String?
  today       Boolean
  complete    Boolean

  createdBy    User    @relation("TaskCreatedByUser", fields: [createdById], references: [id])
  createdById  String
  assignedTo   User?   @relation("TaskAssignedToUser", fields: [assignedToId], references: [id])
  assignedToId String?

  story      Story?    @relation(fields: [storyId], references: [id])
  storyId    String?
  delete     Boolean
  deleteDate DateTime?

  @@index([createdById])
  @@index([assignedToId])
  @@index([storyId])
}

// chat
// model ChatChannel {
//   id          String    @id @default(cuid())
//   createdAt   DateTime  @default(now())
//   name        String
//   description String?
//   // creator
//   owner       User      @relation(fields: [ownerId], references: [id])
//   ownerId     String
//   // members
//   members     ChatMember[]
//   // messages
//   messages    ChatMessage[]
//   // campaigns
//   campaigns   Campaign[]

//   @@index([ownerId])
// }

// model ChatThread {
//   id          String    @id @default(cuid())
//   createdAt   DateTime  @default(now())
//   name        String
//   description String?
//   // creator
//   owner       User      @relation(fields: [ownerId], references: [id])
//   ownerId     String
//   // members
//   members     ChatMember[]
//   // messages
//   messages    ChatMessage[]
//   // campaigns
//   campaigns   Campaign[]

//   @@index([ownerId])
// }

// model ChatMember {
//   id          String    @id @default(cuid())
//   createdAt   DateTime  @default(now())
//   // member
//   user        User      @relation(fields: [userId], references: [id])
//   userId      String
//   // channel
//   channel     ChatChannel? @relation(fields: [channelId], references: [id])
//   channelId   String?
//   // thread
//   thread      ChatThread? @relation(fields: [threadId], references: [id])
//   threadId    String?
//   // campaigns
//   campaigns   Campaign[]

//   @@index([userId])
//   @@index([channelId])
//   @@index([threadId])
// }

// model ChatMessage {
//   id          String    @id @default(cuid())
//   createdAt   DateTime  @default(now())
//   text        String
//   // sender
//   user        User      @relation(fields: [userId], references: [id])
//   userId      String
//   // channel
//   channel     ChatChannel? @relation(fields: [channelId], references: [id])
//   channelId   String?
//   // thread
//   thread      ChatThread? @relation(fields: [threadId], references: [id])
//   threadId    String?
//   // campaigns
//   campaigns   Campaign[]

//   @@index([userId])
//   @@index([channelId])
//   @@index([threadId])
// }

// model ChatMessage {
//   id          String    @id @default(cuid())
//   createdAt   DateTime  @default(now())
//   text        String
//   // sender
//   user        User      @relation(fields: [userId], references: [id])
//   userId      String
//   // channel
//   channel     ChatChannel? @relation(fields: [channelId], references: [id])
//   channelId   String?
//   // thread
//   thread      ChatThread? @relation(fields: [threadId], references: [id])
//   threadId    String?
//   // campaigns
//   campaigns   Campaign[]

//   @@index([userId])
//   @@index([channelId])
//   @@index([threadId])
// }

//* 🏦 assets 🏦 *//

model Track {
  id           String         @id @default(cuid())
  name         String
  artist       User           @relation(fields: [artistId], references: [id])
  artistId     String
  // external ids
  isrc         String?
  appleMusicId String?        @unique
  deezerId     String?        @unique
  soundcloudId String?        @unique
  spotifyId    String?        @unique
  tidalId      String?        @unique
  youtubeId    String?        @unique
  // metadata
  released     Boolean
  releaseDate  DateTime?
  // files 
  masterMp3    File?          @relation("TrackMasterMp3", fields: [masterMp3Id], references: [id])
  masterMp3Id  String?        @unique
  masterWav    File?          @relation("TrackMasterWav", fields: [masterWavId], references: [id])
  masterWavId  String?        @unique
  vids         File[]         @relation("TrackVids")
  trackRenders TrackRender[]
  // links
  appLinks     TrackAppLink[]
  // campaigns
  campaigns    Campaign[]
  stats        Stat[]

  @@unique([artistId, name])
  @@unique([id, spotifyId, appleMusicId, youtubeId])
}

model TrackAppLink {
  track   Track   @relation(fields: [trackId], references: [id])
  trackId String
  link    Link    @relation("TrackAppLink", fields: [linkId, linkApp], references: [id, app])
  linkApp AppType
  linkId  String

  @@id([trackId, linkApp, linkId])
  @@unique([linkId, linkApp])
  @@unique([trackId, linkApp])
}

model Playlist {
  id           String            @id @default(cuid())
  artist       User              @relation(fields: [artistId], references: [id]) // which artist is the playlist for?
  artistId     String
  // streaming
  accounts     PlaylistAccount[]
  appleMusicId String?           @unique
  deezerId     String?           @unique
  soundcloudId String?           @unique
  spotifyId    String?           @unique
  tidalId      String?           @unique
  youtubeId    String?           @unique

  // metadata
  name          String
  description   String?
  public        Boolean
  userOwned     Boolean
  totalTracks   Int?
  // campaigns
  campaigns     Campaign[]
  forTesting    Boolean
  placements    Placement[]
  // artwork
  cover         File                  @relation(fields: [coverId], references: [id])
  coverId       String
  coverRenders  PlaylistCoverRender[]
  // links
  link          Link?                 @relation("PlaylistLink", fields: [linkId], references: [id])
  linkId        String?               @unique
  // clones
  cloneChildren Playlist[]            @relation("PlaylistCloneParent")
  cloneParent   Playlist?             @relation("PlaylistCloneParent", fields: [cloneParentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cloneParentId String?
  // analytics
  stats         Stat[]

  @@index([artistId])
  @@index([coverId])
  @@index([cloneParentId])
}

model PlaylistAccount {
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String
  account    Account  @relation(fields: [accountId], references: [id])
  accountId  String

  @@id([playlistId, accountId])
  @@unique([playlistId, accountId])
  @@index([accountId])
}

//* 🗄 files 🗄 *//

model File {
  id                     String               @id @default(cuid())
  owner                  User?                @relation(fields: [ownerId], references: [id])
  ownerId                String
  createdAt              DateTime             @default(now())
  type                   FileType
  name                   String
  extension              FileExtension
  description            String?
  url                    String
  // props
  size                   Int
  width                  Int?
  height                 Int?
  fps                    Int?
  duration               Int?
  internal               Boolean
  metaId                 String?
  // track
  vidForTrack            Track?               @relation("TrackVids", fields: [vidForTrackId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  vidForTrackId          String?
  masterMp3ForTrack      Track?               @relation("TrackMasterMp3")
  masterWavForTrack      Track?               @relation("TrackMasterWav")
  // playlist
  playlists              Playlist[]
  playlistCoverRender    PlaylistCoverRender? @relation("PlaylistCoverRender")
  // thumbnail
  thumbnail              File?                @relation("FileThumbnail")
  thumbnailFor           File?                @relation("FileThumbnail", fields: [thumbnailForId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  thumbnailForId         String?              @unique
  // vidRender
  vidRender              VidRender?           @relation("VidRender")
  parentVidForVidRenders VidRender[]          @relation("VidRenderParent")
  // adCreative
  adCreatives            AdCreative[]
  // targeting
  vidViewsGroups         VidViewsGroup[]

  @@index([ownerId])
  @@index([vidForTrackId])
  @@index([thumbnailForId])
}

enum FileType {
  audio
  video
  image
}

enum FileExtension {
  mp3
  wav
  jpg
  png
  mp4
  mov
}

//* 💽 renders 💽 *//

model VidRender {
  id                String       @id @default(cuid())
  renderStatus      RenderStatus
  renderFailedError String?      @db.VarChar(1000)
  renderedVid       File         @relation("VidRender", fields: [renderedVidId], references: [id])
  renderedVidId     String       @unique
  // parents
  parentVid         File         @relation("VidRenderParent", fields: [parentVidId], references: [id])
  parentVidId       String
  // comp
  compName          String
  compWidth         Int
  compHeight        Int
  compDuration      Int
  // edits
  trim              Boolean
  trimIn            Decimal      @db.Decimal(10, 1)
  trimOut           Decimal      @db.Decimal(10, 1)
  shift             Boolean
  shiftX            Int
  shiftY            Int
  playbackSpeed     Decimal      @db.Decimal(10, 1)
  // composites
  addTrack          Boolean
  trackRender       TrackRender  @relation(fields: [trackRenderId], references: [id])
  trackRenderId     String
  addPlaylistTitle  Boolean
  playlistTitle     String?
  // lambda
  lambdaRenderId    String
  lambdaBucket      String
  lambdaFunction    String
  lambdaRegion      String
  // for
  adCampaign        AdCampaign?  @relation(fields: [adCampaignId], references: [id])
  adCampaignId      String?

  // @@index([userId])
  @@index([trackRenderId])
  @@index([parentVidId])
  @@index([adCampaignId])
}

enum RenderStatus {
  queued
  rendering
  failed
  complete
}

model TrackRender {
  id                 String       @id @default(cuid())
  track              Track        @relation(fields: [trackId], references: [id])
  trackId            String
  trackTrimIn        Decimal      @db.Decimal(10, 1)
  testForAdCampaigns AdCampaign[]
  vidRenders         VidRender[]

  @@index([trackId])
}

model PlaylistCoverRender {
  id              String       @id @default(cuid())
  name            String?
  // image
  img             Boolean
  imgSrc          String
  imgShift        Boolean
  imgShiftX       Int
  imgShiftY       Int
  imgScale        Int
  // text
  text            Boolean
  textColor       String       @default("white")
  textScale       Int          @default(100)
  textAlign       String       @default("center")
  textShiftX      Int          @default(0)
  textShiftY      Int          @default(0)
  // logo
  logo            Boolean
  logoColor       String       @default("white")
  // output
  renderedCover   File?        @relation("PlaylistCoverRender", fields: [renderedCoverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  renderedCoverId String?      @unique
  // playlist
  playlist        Playlist     @relation(fields: [playlistId], references: [id])
  playlistId      String
  // campaigns
  adCampaigns     AdCampaign[]

  renderedPlaylistCoverId String?
  userId                  String?

  @@index([playlistId])
}

//* 🤝 transactions 🤝 *//

model LineItem {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  name       String
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId String

  paymentType                  PaymentType
  setupPrice                   Decimal?    @db.Decimal(10, 2)
  subscriptionPrice            Decimal?    @db.Decimal(10, 2)
  subscriptionPriceDescription String?
  maintenancePrice             String?
  maintenancePriceDescription  String?

  totalDue Decimal? @db.Decimal(10, 2)

  transactions  Transaction? @relation(fields: [transactionId], references: [id])
  transactionId String?

  @@index([campaignId])
  @@index([transactionId])
}

enum PaymentType {
  oneTime
  subscription
}

model Transaction {
  id                 String            @id @default(cuid())
  createdAt          DateTime          @default(now())
  completedAt        DateTime?
  type               String
  amount             Decimal           @db.Decimal(10, 2)
  description        String?
  lineItems          LineItem[]
  status             TransactionStatus
  // stripe
  stripeId           String?
  stripeClientSecret String?
  stripeMetadata     Json?
  stripeLiveMode     Boolean           @default(false)
  checkoutLink       String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@index([userId])
}

enum TransactionStatus {
  created
  pending
  succeeded
  failed
}
