import type { InferSelectModel } from 'drizzle-orm';
import {
	BILLING_INTERVALS,
	INVOICE_STATUSES,
	INVOICE_TYPES,
	Invoices,
} from '@barely/db/sql';
import { createInsertSchema } from 'drizzle-zod';
import { z } from 'zod/v4';

import { querySelectionSchema } from '../helpers';

// Line item schema
export const invoiceLineItemSchema = z.object({
	description: z.string().min(1, 'Description is required'),
	quantity: z.number().min(1, 'Quantity must be at least 1'),
	rate: z.number().min(0, 'Rate must be positive'),
	amount: z.number().min(0, 'Amount must be positive'),
});

export type InvoiceLineItem = z.infer<typeof invoiceLineItemSchema>;

// Database schemas
export const insertInvoiceSchema = createInsertSchema(Invoices, {
	lineItems: z.array(invoiceLineItemSchema),
});

export const createInvoiceSchema = insertInvoiceSchema
	.omit({
		id: true,
		workspaceId: true,
		createdAt: true,
		updatedAt: true,
		deletedAt: true,
		archivedAt: true,
		status: true, // Defaults to 'draft'
		sentAt: true,
		viewedAt: true,
		paidAt: true,
		stripePaymentIntentId: true,
		subscriptionId: true, // Generated by Stripe
	})
	.extend({
		invoiceNumber: z.string().optional(), // Allow optional invoice number from frontend
		type: z.enum(INVOICE_TYPES).default('oneTime'),
		billingInterval: z.enum(BILLING_INTERVALS).nullable(),
		recurringDiscountPercent: z.number().min(0).max(100).default(0),
	});

export const updateInvoiceSchema = insertInvoiceSchema.partial().required({ id: true });

export const upsertInvoiceSchema = insertInvoiceSchema.partial({
	id: true,
	workspaceId: true,
});

export type InsertInvoice = z.input<typeof insertInvoiceSchema>;
export type CreateInvoice = z.input<typeof createInvoiceSchema>;
export type UpsertInvoice = z.input<typeof upsertInvoiceSchema>;
export type UpdateInvoice = z.input<typeof updateInvoiceSchema>;
export type Invoice = InferSelectModel<typeof Invoices>;

// Filter and search schemas
export const invoiceFilterParamsSchema = z.object({
	search: z.string().optional(),
	status: z.enum(INVOICE_STATUSES).optional(),
	clientId: z.string().optional(),
	showArchived: z.boolean().optional(),
});

export const invoiceSearchParamsSchema = invoiceFilterParamsSchema.extend({
	selectedInvoiceIds: querySelectionSchema.optional(),
	showCreateModal: z.boolean().optional(),
	showUpdateModal: z.boolean().optional(),
	showArchiveModal: z.boolean().optional(),
	showDeleteModal: z.boolean().optional(),
	showSendModal: z.boolean().optional(),
	showDuplicateModal: z.boolean().optional(),
});

export const selectWorkspaceInvoicesSchema = invoiceFilterParamsSchema.extend({
	cursor: z.object({ id: z.string(), createdAt: z.coerce.date() }).optional(),
	limit: z.coerce.number().min(1).max(100).optional().default(20),
});

// Actions
export const sendInvoiceSchema = z.object({
	id: z.string(),
	message: z.string().optional(),
});

export const markInvoicePaidSchema = z.object({
	id: z.string(),
	paidAt: z.date().optional(),
});

export const duplicateInvoiceSchema = z.object({
	id: z.string(),
});

// Default values
export const defaultInvoice: CreateInvoice = {
	clientId: '',
	lineItems: [
		{
			description: '',
			quantity: 1,
			rate: 0,
			amount: 0,
		},
	],
	tax: 0,
	subtotal: 0,
	total: 0,
	dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now
	type: 'oneTime',
	billingInterval: null,
	recurringDiscountPercent: 0,
};
