NODE timeseries
DESCRIPTION >
    Generate a timeseries for the specified time range, so we can fill in empty data points.
        Defaults to last 7 days.

SQL >

    %
        {% set _single_day = defined(date_from) and day_diff(date_from, date_to) <= 1 %}
        with
           toStartOfDay(
                toDateTime64({{ DateTime64(date_from, '2024-12-01 00:00:00.000') }}, 3),
                {{ String(timezone, 'UTC') }}
            ) AS start,
            toStartOfDay(
                toDateTime64({{ DateTime64(date_to, '2024-12-01 00:00:00.000') }}, 3),
                {{ String(timezone, 'UTC') }}
            ) AS
        end
        {% if _single_day %}
            select
                arrayJoin(
                    arrayMap(
                        x -> toDateTime(x),
                        range(
                            toUInt32(toDateTime(start)),
                            toUInt32(timestampAdd(end, interval 1 day)),
                            3600
                        )
                    )
                ) as date
        {% else %}
            select
                arrayJoin(
                    arrayMap(
                        x -> toDate(x),
                        range(
                            toUInt32(start),
                            toUInt32(timestampAdd(end, interval 1 day)),
                            24 * 3600
                        )
                    )
                ) as date
        {% end %}
        where date <= now()



NODE hits
DESCRIPTION >
    Group by sessions and calculate metrics at that level

SQL >

    %
    {% if defined(date_from) and day_diff(date_from, date_to) <= 1 %}
        select
            toStartOfHour(toTimezone(timestamp, 'America/New_York')) as date,
            sessionId,
            uniq(sessionId) as visits,
            count() as events,
            case when min(timestamp) = max(timestamp) then 1 else 0 end as is_bounce,
            max(toTimezone(timestamp, 'America/New_York')) as latest_hit_aux,
            min(toTimezone(timestamp, 'America/New_York')) as first_hit_aux
        from web_hits_v2
        where
            toDate(toTimezone(timestamp, 'America/New_York')) >= {{ Date(date_from) }}
            and toDate(toTimezone(timestamp, 'America/New_York')) <= {{ Date(date_to) }}
            {% if defined(workspaceId) %} and workspaceId = {{ String(workspaceId) }} {% end %}
            {% if defined(assetId) %} and assetId = {{ String(assetId) }} {% end %}
            {% if defined(types) %} and type IN {{ Array(types, 'String') }} {% end %}
            {% if defined(city) %} and city = {{ String(city) }} {% end %}
            {% if defined(country) %} and country = {{ String(country) }} {% end %}
            {% if defined(device) %} and device = {{ String(device) }} {% end %}
            {% if defined(browser) %} and browser = {{ String(browser) }} {% end %}
            {% if defined(os) %} and os = {{ String(os) }} {% end %}
            {% if defined(referer) %} and referer = {{ String(referer) }} {% end %}
        group by toStartOfHour(toTimezone(timestamp, 'America/New_York')), sessionId
    {% else %}
        select
            date,
            sessionId,
            uniq(sessionId) as visits,
            countMerge(hits) as events,
            case when min(first_hit) = max(latest_hit) then 1 else 0 end as is_bounce,
            max(latest_hit) as latest_hit_aux,
            min(first_hit) as first_hit_aux
        from {% if timezone == 'America/Los_Angeles' %} web_sessions_et_mv
             {% elif timezone == 'Europe/London' %} web_sessions_et_mv
             {% else %} web_sessions_et_mv
             {% end %}
        where
            {% if defined(date_from) %} date >= {{ Date(date_from) }}
            {% else %} date >= timestampAdd(today(), interval -8 day)
            {% end %}
            {% if defined(date_to) %} and date <= {{ Date(date_to) }}
            {% else %} and date <= toDate(toTimezone(now(), 'America/New_York'))
            {% end %}
            {% if defined(workspaceId) %} and workspaceId = {{ String(workspaceId) }}
            {% end %}
            {% if defined(assetId) %} and assetId = {{ String(assetId) }}
            {% end %}
            {% if defined(types) %} AND type IN {{ Array(types, 'String') }}
            {% end %}
            {% if defined(city) %} and city = {{ String(city) }}
            {% end %}
            {% if defined(country) %} and country = {{ String(country) }}
            {% end %}
            {% if defined(device) %} and device = {{ String(device) }}
            {% end %}
            {% if defined(browser) %} and browser = {{ String(browser) }}
            {% end %}
            {% if defined(os) %} and os = {{ String(os) }}
            {% end %}
            {% if defined(referer) %} and referer = {{ String(referer) }}
            {% end %}
        group by date, sessionId
    {% end %}



NODE data
DESCRIPTION >
    General KPIs per date, works for both summary metrics and trends charts.

SQL >

    select 
      date,
      uniq(sessionId) as visits,
      sum(events) as events,
      sum(case when latest_hit_aux = first_hit_aux then 1 end) / visits as bounce_rate,
      avg(latest_hit_aux - first_hit_aux) as avg_session_sec
    from 
     hits
    group by
      date



NODE endpoint
DESCRIPTION >
    Join and generate timeseries with metrics

SQL >

    select
      a.date,
      b.visits,
      b.events,
      b.bounce_rate,
      b.avg_session_sec
    from
      timeseries a
    left join data b using date

TYPE endpoint


