name: Update Vercel Environment Variables

on:
  workflow_call:
    inputs:
      apps:
        required: true
        type: string
        description: 'JSON array of apps to update'
      database_url:
        required: true
        type: string
        description: 'Database URL to set'
      database_pool_url:
        required: false
        type: string
        description: 'Database pool URL to set'
      environment:
        required: true
        type: string
        description: 'Environment: preview or production'
      branch_name:
        required: false
        type: string
        description: 'Branch name for preview environments'
    secrets:
      VERCEL_TOKEN:
        required: true
      VERCEL_TEAM_ID:
        required: true

jobs:
  update-env:
    name: Update Vercel env vars
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy script from repo
        run: cp .github/scripts/update-vercel-env.sh ./update-env.sh || echo "Script not found, will create inline"

      - name: Create update script if needed
        run: |
          if [ ! -f ./update-env.sh ]; then
            cat > update-env.sh << 'EOF'
          #!/bin/bash
          set -e
          
          update_env_var() {
            local app_name=$1
            local project_id=$2
            local env_type=$3
            local branch=$4
            
            echo "Updating $app_name..."
            
            # Prepare branch option for preview environments
            BRANCH_OPT=""
            if [ "$env_type" = "preview" ] && [ -n "$branch" ]; then
              BRANCH_OPT="--git-branch=$branch"
            fi
            
            # Check and remove existing vars if they exist
            if [ "$env_type" = "preview" ] && [ -n "$branch" ]; then
              vercel env ls preview $branch --token=$VERCEL_TOKEN --scope=barely 2>/dev/null | grep -q DATABASE_URL && \
                vercel env rm DATABASE_URL preview $branch --yes --token=$VERCEL_TOKEN --scope=barely || true
              vercel env ls preview $branch --token=$VERCEL_TOKEN --scope=barely 2>/dev/null | grep -q DATABASE_POOL_URL && \
                vercel env rm DATABASE_POOL_URL preview $branch --yes --token=$VERCEL_TOKEN --scope=barely || true
              vercel env ls preview $branch --token=$VERCEL_TOKEN --scope=barely 2>/dev/null | grep -q DIRECT_DATABASE_URL && \
                vercel env rm DIRECT_DATABASE_URL preview $branch --yes --token=$VERCEL_TOKEN --scope=barely || true
            fi
            
            # Update DATABASE_URL
            echo "$DATABASE_URL" | vercel env add DATABASE_URL $env_type $BRANCH_OPT --yes --token=$VERCEL_TOKEN --scope=barely || true
            
            # Update DATABASE_POOL_URL
            if [ -n "$DATABASE_POOL_URL" ]; then
              echo "$DATABASE_POOL_URL" | vercel env add DATABASE_POOL_URL $env_type $BRANCH_OPT --yes --token=$VERCEL_TOKEN --scope=barely || true
            else
              echo "$DATABASE_URL" | vercel env add DATABASE_POOL_URL $env_type $BRANCH_OPT --yes --token=$VERCEL_TOKEN --scope=barely || true
            fi
            
            # Update DIRECT_DATABASE_URL (same as DATABASE_URL)
            echo "$DATABASE_URL" | vercel env add DIRECT_DATABASE_URL $env_type $BRANCH_OPT --yes --token=$VERCEL_TOKEN --scope=barely || true
            
            echo "✓ Updated $app_name"
          }
          
          export -f update_env_var
          export DATABASE_URL="${{ inputs.database_url }}"
          export DATABASE_POOL_URL="${{ inputs.database_pool_url }}"
          export VERCEL_TOKEN="${{ secrets.VERCEL_TOKEN }}"
          export VERCEL_PROJECT_ID=""
          
          # Parse apps and update in parallel
          echo '${{ inputs.apps }}' | jq -r '.[] | @base64' | while read app; do
            _jq() {
              echo ${app} | base64 --decode | jq -r ${1}
            }
            
            app_name=$(_jq '.name')
            project_id=$(_jq '.projectId')
            
            # Set project ID for this app
            export VERCEL_PROJECT_ID=\${{ secrets[\$project_id] }}
            
            update_env_var "$app_name" "$project_id" "${{ inputs.environment }}" "${{ inputs.branch_name }}" &
          done
          
          # Wait for all background jobs to complete
          wait
          
          echo "✅ All apps updated"
          EOF
          fi
          
          chmod +x update-env.sh

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Update environment variables
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_APP_PROJECT_ID: ${{ secrets.VERCEL_APP_PROJECT_ID }}
          VERCEL_CART_PROJECT_ID: ${{ secrets.VERCEL_CART_PROJECT_ID }}
          VERCEL_FM_PROJECT_ID: ${{ secrets.VERCEL_FM_PROJECT_ID }}
          VERCEL_LINK_PROJECT_ID: ${{ secrets.VERCEL_LINK_PROJECT_ID }}
          VERCEL_MANAGE_EMAIL_PROJECT_ID: ${{ secrets.VERCEL_MANAGE_EMAIL_PROJECT_ID }}
          VERCEL_PAGE_PROJECT_ID: ${{ secrets.VERCEL_PAGE_PROJECT_ID }}
          VERCEL_PRESS_PROJECT_ID: ${{ secrets.VERCEL_PRESS_PROJECT_ID }}
          VERCEL_SPARROW_PROJECT_ID: ${{ secrets.VERCEL_SPARROW_PROJECT_ID }}
          VERCEL_WWW_PROJECT_ID: ${{ secrets.VERCEL_WWW_PROJECT_ID }}
        run: ./update-env.sh