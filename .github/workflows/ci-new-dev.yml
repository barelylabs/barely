name: Preview Environments

on:
  create:
  pull_request:
    types: [opened, synchronize, closed]
    branches-ignore:
      - 'main'

env:
  pscale_base_directory: .pscale
  VERCEL_ACCESS_TOKEN: ${{secrets.VERCEL_TOKEN}}
  VERCEL_TEAM_ID: ${{secrets.VERCEL_TEAM_ID}}

jobs:
  create_db_branch:
    name: Planetscale Dev Branch
    runs-on: ubuntu-latest
    outputs:
      database_url: ${{ steps.create-db-branch-and-connection.outputs.database_url }}
    env:
      ORG_NAME: ${{secrets.TEAM_ID}}
      DB_NAME: ${{secrets.PLANETSCALE_DB_NAME}}
      PLANETSCALE_SERVICE_TOKEN: ${{secrets.PLANETSCALE_SERVICE_TOKEN}}
      PLANETSCALE_SERVICE_TOKEN_ID: ${{secrets.PLANETSCALE_SERVICE_TOKEN_ID}}
    steps:
      - name: Validate parameters
        id: validate_params
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch_name = "${{ github.ref_name }}";

            core.info(`Branch name: ${branch_name}`);

            const regex = /[^\/]+$/;
            let clean_branch_name;

            if (branch_name.match(regex)) {
              clean_branch_name = branch_name.match(regex)[0];
            } else {
              clean_branch_name = branch_name;
            }

            if (! /^[a-zA-Z0-9_-]+$/.test(clean_branch_name)) {
              const error = `The branch name contains illegal characters: ${clean_branch_name}`;
              core.error(error);
              core.setFailed(error);
            }
            core.setOutput('branch_name', clean_branch_name);

      - name: Checkout
        uses: actions/checkout@v3

      - name: Create db branch
        id: create-db-branch-and-connection
        timeout-minutes: 3
        env:
          BRANCH_NAME: ${{ steps.validate_params.outputs.branch_name }}

        working-directory: ${{env.pscale_base_directory}}/cli-helper-scripts/
        run: |
          ./create-branch-and-connection.sh "$BRANCH_NAME"

  # build:
  # name: Turbo Build
  # runs-on: ubuntu-latest
  # timeout-minutes: 15
  # env:
  #   TURBO_TOKEN: ${{secrets.VERCEL_TOKEN}}
  #   TURBO_TEAM_ID: ${{secrets.VERCEL_TEAM_ID}}

  # steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v3

  #   - uses: pnpm /action-setup@v2.0.1
  #     with:
  #       version: 6.32.2

  #   - name: Setup Node.js environment
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: '18'
  #       cache: 'pnpm'

  #   - name: Install dependencies
  #     run: pnpm i && pnpm i -r

  #   - name: Build
  #     run: pnpm build

  ### DEPLOY
  # deploy_web:
  #   name: Vercel Preview Deployment - barely.io
  #   if: ${{ github.event.action == 'opened' || github.event.action == 'synchronize' || github.event.ref_type == 'branch'}}
  #   needs: [create_db_branch]
  #   runs-on: ubuntu-latest
  #   env:
  #     VERCEL_PROJECT_ID: ${{secrets.VERCEL_WEB_PROJECT_ID}}
  #   steps:
  #     - uses: snaplet/action@v1
  #       with:
  #         env: |
  #           DATABASE_URL=${{ needs.create_db_branch.outputs.database_url }}

  # deploy_app:
  #   name: Vercel Preview Deployment - app.barely.io
  #   if: ${{ github.event.action == 'opened' || github.event.action == 'synchronize' || github.event.ref_type == 'branch' }}
  #   needs: [create_db_branch]
  #   runs-on: ubuntu-latest
  #   env:
  #     VERCEL_PROJECT_ID: ${{secrets.VERCEL_APP_PROJECT_ID}}
  #   steps:
  #     - uses: snaplet/action@v1
  #       with:
  #         env: |
  #           DATABASE_URL=${{ needs.create_db_branch.outputs.database_url }}

  deploy_link:
    name: Vercel Preview Deployment - link.barely.io
    if: ${{ github.event.action == 'opened' || github.event.action == 'synchronize' || github.event.ref_type == 'branch' }}
    needs: [create_db_branch]
    runs-on: ubuntu-latest
    outputs:
      deployment_url: ${{ steps.deploy.outputs.deployment-url }}
    env:
      VERCEL_PROJECT_ID: ${{secrets.VERCEL_LINK_PROJECT_ID}}
    steps:
      - uses: snaplet/vercel-action@v2
        id: deploy
        with:
          env: |
            DATABASE_URL=${{ needs.create_db_branch.outputs.database_url }}
          await-for-deployment: true

  ### DELETE
  # delete_web:
  #   if: ${{ github.event.action == 'closed' }}
  #   runs-on: ubuntu-latest
  #   env:
  #     VERCEL_PROJECT_ID: ${{secrets.VERCEL_WEB_PROJECT_ID}}
  #   steps:
  #     - uses: snaplet/vercel-action@v2
  #       with:
  #         delete: true

  # delete_app:
  #   if: ${{ github.event.action == 'closed' }}
  #   runs-on: ubuntu-latest
  #   env:
  #     VERCEL_PROJECT_ID: ${{secrets.VERCEL_APP_PROJECT_ID}}
  #   steps:
  #     - uses: snaplet/vercel-action@v2
  #       with:
  #         delete: true

  delete_link:
    if: ${{ github.event.action == 'closed' }}
    runs-on: ubuntu-latest
    env:
      VERCEL_PROJECT_ID: ${{secrets.VERCEL_LINK_PROJECT_ID}}
    steps:
      - uses: snaplet/vercel-action@v2
        with:
          delete: true

  # create_app_preview:
  #   name: Vercel Preview Deployment
  #   needs: [create_db_branch]
  #   runs-on: ubuntu-latest
  #   env:
  #     DATABASE_URL: ${{ needs.create_db_branch.outputs.database_url }}
  #     TURBO_TOKEN: ${{secrets.VERCEL_TOKEN}}
  #     TURBO_TEAM_ID: ${{secrets.TEAM_ID}}

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Install Vercel CLI
  #       run: npm install --global vercel@latest

  #     - name: Add preview db string
  #       run: vercel env add DATABASE_URL preview

  #     - name: Pull Vercel Environment Information
  #       run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

  #     - name: Build Project Artifacts
  #       run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

  #     - name: Deploy Project Artifacts to Vercel
  #       run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
