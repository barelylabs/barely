# Simplified Preview Workflow using reusable components
name: Preview

on:
  pull_request:
  merge_group:
    types: [checks_requested]

jobs:
  # Extract git metadata
  git-meta:
    name: Extract Git Metadata
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      git_branch_name: ${{ steps.git-meta.outputs.github_commit_ref }}
      vercel_git_metadata: ${{ steps.git-meta.outputs.vercel_git_metadata }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Extract metadata
        id: git-meta
        run: |
          github_commit_sha=${{ github.event.pull_request.head.sha }}
          github_commit_author_login=${{ github.actor }}
          github_deployment=1
          github_org=${{ github.repository_owner }}
          github_repo=${{ github.repository }}
          github_commit_org=${{ github.repository_owner }}
          github_commit_repo=${{ github.repository }}
          github_commit_message=$(git show -s --format=%s $github_commit_sha)
          github_commit_ref=${{ github.event.pull_request.head.ref }}

          vercel_git_metadata="-m githubCommitSha=$github_commit_sha -m githubCommitAuthorName=$github_commit_author_login -m githubCommitAuthorLogin=$github_commit_author_login -m githubDeployment=$github_deployment -m githubOrg=$github_org -m githubRepo=$github_repo -m githubCommitOrg=$github_commit_org -m githubCommitRepo=$github_commit_repo -m githubCommitMessage=\"$github_commit_message\" -m githubCommitRef=$github_commit_ref"

          echo "github_commit_ref=$github_commit_ref" >> $GITHUB_OUTPUT
          echo "vercel_git_metadata=$vercel_git_metadata" >> $GITHUB_OUTPUT

  # Setup Neon preview branch
  neon-preview:
    name: Setup Neon Preview
    if: github.event_name == 'pull_request'
    needs: git-meta
    uses: ./.github/workflows/shared-neon-setup.yml
    with:
      action: create-branch
      branch_name: ${{ needs.git-meta.outputs.git_branch_name }}
    secrets:
      NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
      NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
      PG_USERNAME: ${{ secrets.PG_USERNAME }}
      PG_DATABASE: ${{ secrets.PG_DATABASE }}

  # Update Vercel env vars for all apps
  update-vercel-env:
    name: Update Vercel Environment
    if: github.event_name == 'pull_request'
    needs: [git-meta, neon-preview]
    uses: ./.github/workflows/shared-vercel-env.yml
    with:
      environment: preview
      branch_name: ${{ needs.git-meta.outputs.git_branch_name }}
      database_url: ${{ needs.neon-preview.outputs.database_url }}
      database_pool_url: ${{ needs.neon-preview.outputs.database_pool_url }}
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}

  # Deploy Trigger.dev
  trigger-preview:
    name: Deploy Trigger.dev Preview
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node/pnpm
        uses: ./tooling/github/setup
      - name: Deploy trigger.dev
        env:
          TRIGGER_ACCESS_TOKEN: ${{ secrets.TRIGGER_ACCESS_TOKEN }}
        run: pnpm deploy-trigger:staging

  # Deploy all apps
  deploy-apps:
    name: Deploy Preview Apps
    needs: [git-meta, update-vercel-env]
    uses: ./.github/workflows/shared-deploy-apps.yml
    with:
      environment: preview
      git_branch: ${{ needs.git-meta.outputs.git_branch_name }}
      vercel_git_metadata: ${{ needs.git-meta.outputs.vercel_git_metadata }}
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}

  # Comment on PR with deployment links
  comment:
    name: Comment Deployment Links
    if: github.event_name == 'pull_request'
    needs: [neon-preview, deploy-apps]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/apps.json
          sparse-checkout-cone-mode: false

      - name: Build comment
        id: build-comment
        run: |
          # Load app configuration
          APPS=$(cat .github/apps.json | jq -r '.apps[]')
          
          # Build deployment table
          DEPLOYMENT_TABLE="| App | Preview | Inspect |
          |-----|---------|---------|"
          
          # Parse deployment outputs
          DEPLOYMENTS='${{ needs.deploy-apps.outputs.deployments }}'
          
          # Add each app to the table
          echo "$APPS" | jq -r '.name' | while read app; do
            # Extract URLs from deployment data
            PREVIEW_URL=$(echo "$DEPLOYMENTS" | jq -r --arg app "$app" '.[$app].deployment_url // "N/A"')
            INSPECT_URL=$(echo "$DEPLOYMENTS" | jq -r --arg app "$app" '.[$app].inspect_url // "N/A"')
            
            # Add emoji based on app name
            case $app in
              app) EMOJI="üì±" ;;
              cart) EMOJI="üõí" ;;
              fm) EMOJI="üìª" ;;
              link) EMOJI="üîó" ;;
              page) EMOJI="üìÑ" ;;
              press) EMOJI="üì∞" ;;
              sparrow) EMOJI="üê¶" ;;
              www) EMOJI="üåê" ;;
              manage-email) EMOJI="üìß" ;;
              *) EMOJI="üöÄ" ;;
            esac
            
            DEPLOYMENT_TABLE="$DEPLOYMENT_TABLE
          | $EMOJI $app | [$PREVIEW_URL]($PREVIEW_URL) | [$INSPECT_URL]($INSPECT_URL) |"
          done
          
          # Add Neon info
          NEON_TABLE="| Database | Inspect |
          |----------|---------|
          | üêò Neon | [View Branch](https://console.neon.tech/app/projects/${{ secrets.NEON_PROJECT_ID }}/branches/${{ needs.neon-preview.outputs.branch_id }}) |"
          
          # Store the complete comment
          echo "comment<<EOF" >> $GITHUB_OUTPUT
          echo "## üöÄ Preview Deployments" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$DEPLOYMENT_TABLE" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## üíæ Database" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$NEON_TABLE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment on PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: ${{ steps.build-comment.outputs.comment }}
          comment_tag: preview-deployments

  # Merge check
  preview--can-merge:
    name: Preview Can Merge
    needs: [neon-preview, trigger-preview, deploy-apps]
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      actions: read
    steps:
      - name: Check all jobs succeeded
        env:
          NEEDS_JSON: '${{ toJson(needs) }}'
        run: |
          echo "ALL_SUCCESS=$(echo "$NEEDS_JSON" | jq '. | to_entries | map([.value.result == "success", .value.result == "skipped"] | any) | all')" >> $GITHUB_ENV
      - name: Verify success
        run: '[ $ALL_SUCCESS = true ]'