name: Deploy to Vercel

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      working_directory:
        required: true
        type: string
      scope:
        required: true
        type: string
      environment:
        required: true
        type: string
      git_branch:
        required: true
        type: string
      vercel_git_metadata:
        required: true
        type: string
      current_app_override:
        required: false
        type: string
      delay_seconds:
        required: false
        type: number
        default: 0
    outputs:
      deployment_id:
        value: ${{ jobs.deploy-to-vercel.outputs.deployment_id }}
      deployment_url:
        value: ${{ jobs.deploy-to-vercel.outputs.deployment_url }}
      inspect_url:
        value: ${{ jobs.deploy-to-vercel.outputs.inspect_url }}
    secrets:
      VERCEL_TOKEN:
        required: true
      VERCEL_PROJECT_ID:
        required: true
      VERCEL_TEAM_ID:
        required: true

jobs:
  deploy-to-vercel:
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      TURBO_TEAM: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    outputs:
      deployment_id: ${{ steps.deploy.outputs.deployment_id }}
      deployment_url: ${{ steps.deploy.outputs.deployment_url }}
      inspect_url: ${{ steps.deploy.outputs.inspect_url }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: setup node/pnpm/turbo/vercel
        uses: ./tooling/github/setup

      - name: copy and prepare app variant
        if: ${{ inputs.current_app_override != '' }}
        run: |
          cp -r apps/app apps/app-${{ inputs.current_app_override }}
          echo "Copied apps/app to apps/app-${{ inputs.current_app_override }}"
          
          # Update package.json name to match the new directory
          sed -i 's/"name": "@barely\/app"/"name": "@barely\/app-${{ inputs.current_app_override }}"/' apps/app-${{ inputs.current_app_override }}/package.json
          echo "Updated package.json name to @barely/app-${{ inputs.current_app_override }}"
          
          ls -la apps/

      - name: delay to prevent rate limiting
        if: ${{ inputs.delay_seconds > 0 }}
        run: |
          echo "Waiting ${{ inputs.delay_seconds }} seconds to prevent rate limiting..."
          sleep ${{ inputs.delay_seconds }}

      - name: capture runner IP address
        id: ip
        run: |
          echo "🌐 Capturing GitHub Runner IP Address for debugging..."
          RUNNER_IP=$(curl -4 -s ifconfig.me)
          echo "Runner IPv4: $RUNNER_IP"
          echo "runner_ip=$RUNNER_IP" >> $GITHUB_OUTPUT

          # Also add to job summary for easy access
          echo "### Runner Information" >> $GITHUB_STEP_SUMMARY
          echo "- **IPv4 Address**: $RUNNER_IP" >> $GITHUB_STEP_SUMMARY
          echo "- **App**: ${{ inputs.app_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

      - name: link vercel
        run: |
          # Function to attempt vercel link with retry logic
          attempt_vercel_link() {
            local attempt=$1
            local max_attempts=3

            echo "🔗 Attempting to link Vercel project (attempt $attempt/$max_attempts)..."
            echo "Runner IP: ${{ steps.ip.outputs.runner_ip }}"

            if pnpm vercel link --repo --scope=${{ inputs.scope }} --yes --token=${{ secrets.VERCEL_TOKEN }} --debug; then
              echo "✅ Successfully linked Vercel project"
              return 0
            else
              local exit_code=$?
              echo ""
              echo "❌ Failed to link Vercel project (attempt $attempt/$max_attempts)"
              echo "Exit code: $exit_code"
              echo "Runner IP: ${{ steps.ip.outputs.runner_ip }}"
              echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
              echo ""

              # Add failure details to job summary
              echo "### ❌ Vercel Link Failed" >> $GITHUB_STEP_SUMMARY
              echo "- **Attempt**: $attempt/$max_attempts" >> $GITHUB_STEP_SUMMARY
              echo "- **Runner IP**: ${{ steps.ip.outputs.runner_ip }}" >> $GITHUB_STEP_SUMMARY
              echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
              echo "- **App**: ${{ inputs.app_name }}" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY

              if [ $attempt -lt $max_attempts ]; then
                local wait_time=$((attempt * 5))
                echo "⏳ Waiting ${wait_time} seconds before retry..."
                sleep $wait_time
                return 1
              else
                echo "========================================="
                echo "🚨 VERCEL LINK FAILURE - PLEASE REPORT TO VERCEL SUPPORT"
                echo "========================================="
                echo "Runner IP Address: ${{ steps.ip.outputs.runner_ip }}"
                echo "App Name: ${{ inputs.app_name }}"
                echo "Environment: ${{ inputs.environment }}"
                echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
                echo ""
                echo "Please share this IP address with Vercel Support for firewall investigation."
                echo "Reference: ETIMEDOUT errors during concurrent deployments"
                echo "========================================="
                exit $exit_code
              fi
            fi
          }

          # Try up to 3 times
          for i in 1 2 3; do
            if attempt_vercel_link $i; then
              break
            fi
          done

      - name: pull vercel
        run: |
          if [ "${{ inputs.environment }}" = "preview" ]; then
            ENV_OPTIONS="--git-branch=${{ inputs.git_branch }}"
          else
            ENV_OPTIONS=""
          fi

          # Use copied directory if current_app_override is set
          if [ -n "${{ inputs.current_app_override }}" ]; then
            WORKING_DIR="apps/app-${{ inputs.current_app_override }}"
          else
            WORKING_DIR="apps/${{ inputs.app_name }}"
          fi

          cd $WORKING_DIR && pnpm vercel pull --yes --environment=${{ inputs.environment }} $ENV_OPTIONS --token=${{ secrets.VERCEL_TOKEN }} --debug

          VERCEL_URL=${{ inputs.app_name }}-git-${{ inputs.git_branch }}-${{ inputs.scope }}.vercel.app
          sed -i '/VERCEL_URL/d' .vercel/.env.${{ inputs.environment }}.local
          echo "VERCEL_URL=\"$VERCEL_URL\"" >> .vercel/.env.${{ inputs.environment }}.local                    
          cp .vercel/.env.${{ inputs.environment }}.local ../../.env

      - name: build project artifacts
        run: |
          # For app variants, build the renamed package
          if [ -n "${{ inputs.current_app_override }}" ]; then
            BUILD_PACKAGE="@barely/app-${{ inputs.current_app_override }}"
          else
            BUILD_PACKAGE="@barely/${{ inputs.app_name }}"
          fi
          
          # Run build and capture output for error detection
          if ! BUILD_OUTPUT=$(pnpm build:${{ inputs.environment }} --filter=$BUILD_PACKAGE --token=${{ secrets.VERCEL_TOKEN }} 2>&1); then
            echo "$BUILD_OUTPUT"
            
            # Check for the specific lockfile mismatch error
            if echo "$BUILD_OUTPUT" | grep -q "specifiers in the lockfile.*don't match specs in package.json" || \
               echo "$BUILD_OUTPUT" | grep -q "Cannot install with \"frozen-lockfile\"" || \
               echo "$BUILD_OUTPUT" | grep -q "ERR_PNPM_OUTDATED_LOCKFILE"; then
              echo ""
              echo "========================================="
              echo "❌ ERROR: Lockfile mismatch detected for app variant"
              echo "========================================="
              echo ""
              echo "This error occurs because the app variant '${{ inputs.current_app_override }}' is created"
              echo "dynamically during CI/CD and doesn't exist in the pnpm-lock.yaml file."
              echo ""
              echo "TO FIX THIS:"
              echo "1. Go to the Vercel dashboard: https://vercel.com/${{ inputs.scope }}"
              echo "2. Find the project: app-${{ inputs.current_app_override }}"
              echo "3. Go to Settings → General → Build & Development Settings"
              echo "4. Override the 'Install Command' field with: echo 'Skipping install'"
              echo "5. Save the changes and re-run this workflow"
              echo ""
              echo "This is a one-time configuration that tells Vercel to skip the"
              echo "dependency installation step since we're building in CI/CD."
              echo "========================================="
            fi
            exit 1
          fi
          
          echo "$BUILD_OUTPUT"
          
          # Copy .vercel to root for deployment
          # For app variants, copy from the copied directory
          if [ -n "${{ inputs.current_app_override }}" ]; then
            cp -r apps/app-${{ inputs.current_app_override }}/.vercel .
          else
            cp -r apps/${{ inputs.app_name }}/.vercel .
          fi

      - name: deploy to vercel
        id: deploy
        run: |
          if [ "${{ inputs.environment }}" = "production" ]; then
            ENV_OPTIONS="--prod --skip-domain"
          else
            ENV_OPTIONS=""
          fi

          # Deploy from root with the copied .vercel directory
          deployment_url=$(pnpm vercel deploy --prebuilt $ENV_OPTIONS ${{ inputs.vercel_git_metadata }} --token=${{ secrets.VERCEL_TOKEN }} --debug)          

          inspect=$(pnpm vercel inspect $deployment_url --token=${{ secrets.VERCEL_TOKEN }} --debug 2>&1)
          deployment_id=$(echo "$inspect" | grep -m 1 '^    id' | awk '{print $NF}' | cut -d'_' -f 2-)
          
          # For app variants, use the override name in the inspect URL
          if [ -n "${{ inputs.current_app_override }}" ]; then
            inspect_url="https://vercel.com/${{ inputs.scope }}/${{ inputs.app_name }}-${{ inputs.current_app_override }}/$deployment_id"
          else
            inspect_url="https://vercel.com/${{ inputs.scope }}/${{ inputs.app_name }}/$deployment_id"
          fi

          echo "deployment_id=$deployment_id" >> $GITHUB_OUTPUT
          echo "deployment_url=$deployment_url" >> $GITHUB_OUTPUT          
          echo "inspect_url=$inspect_url" >> $GITHUB_OUTPUT
