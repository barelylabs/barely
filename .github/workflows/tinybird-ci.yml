name: Tinybird CI/CD

on:
  pull_request:
    paths:
      - 'packages/tb/tinybird/**'
      - '!packages/tb/tinybird/**.md'
      - '.github/workflows/tinybird-ci.yml'
  push:
    branches:
      - main
    paths:
      - 'packages/tb/tinybird/**'
      - '!packages/tb/tinybird/**.md'
      - '.github/workflows/tinybird-ci.yml'
  merge_group:
    types: [checks_requested]

jobs:
  validate:
    name: Validate Tinybird Resources in Branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-tinybird-cli
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Tinybird CLI
        run: |
          pip install tinybird-cli
          tb --version

      - name: Validate and Deploy to CI Branch
        if: github.event_name == 'pull_request'
        env:
          TB_TOKEN: ${{ secrets.TINYBIRD_API_KEY }}
          TB_HOST: https://api.us-east.tinybird.co
        run: |
          set -euo pipefail
          cd packages/tb/tinybird
          BRANCH_NAME="ci_pr_${{ github.event.pull_request.number }}"

          # Establish workspace context first
          echo "Setting workspace context to 'barely'..."
          if ! tb workspace use barely; then
            echo "::error::Failed to set workspace context"
            exit 1
          fi

          # Check current branch count (max 3 allowed)
          BRANCH_COUNT=$(tb branch ls | grep -c "^[[:alnum:]]" || true)
          if [ "$BRANCH_COUNT" -ge 3 ]; then
            echo "::warning::Already at maximum branch limit (3). Some branches may need cleanup."
          fi

          # Try to use existing branch, create if it doesn't exist
          if ! tb branch use $BRANCH_NAME 2>/dev/null; then
            echo "Creating new branch: $BRANCH_NAME"
            # Create branch WITH data copying to preserve materialized view relationships
            # This prevents errors when pushing pipes that feed MVs
            echo "y" | tb branch create $BRANCH_NAME
            if [ $? -ne 0 ]; then
              echo "::error::Failed to create branch $BRANCH_NAME"
              exit 1
            fi
            if ! tb branch use $BRANCH_NAME; then
              echo "::error::Failed to switch to branch $BRANCH_NAME"
              exit 1
            fi
            echo "::notice::Created branch with data copy to preserve MV relationships"
          else
            echo "Using existing branch: $BRANCH_NAME"
          fi
          
          echo "::notice::Successfully using branch: $BRANCH_NAME"

          # Validate syntax
          echo "Running syntax validation..."
          if ! tb check; then
            echo "::error::Syntax validation failed"
            exit 1
          fi
          echo "::notice::Syntax validation passed"

          # Deploy changes
          echo "Deploying changes to CI branch..."
          
          # For CI branches, we need to handle MV limitations
          # Branches with data copy can't modify pipes that feed MVs
          echo "::warning::CI branches have MV limitations. Using selective push strategy."
          
          # Push datasources first (these should work)
          echo "Pushing datasources..."
          for file in datasources/*.datasource; do
            if [ -f "$file" ]; then
              echo "  - Pushing $(basename "$file")"
              tb push "$file" --force --yes || {
                echo "::warning::Failed to push $file (may already exist)"
              }
            fi
          done
          
          # List of pipes that feed MVs and should be skipped in branches
          MV_FEEDING_PIPES="web_hits.pipe web_sessions.pipe web_sources.pipe web_sessions_et.pipe web_sessions_pt.pipe web_sources_et.pipe"
          
          # Push pipes, skipping those that feed MVs
          echo "Pushing pipes (skipping MV feeders)..."
          for file in pipes/*.pipe; do
            if [ -f "$file" ]; then
              PIPE_NAME=$(basename "$file")
              if echo "$MV_FEEDING_PIPES" | grep -q "$PIPE_NAME"; then
                echo "  - Skipping $PIPE_NAME (feeds materialized views)"
              else
                echo "  - Pushing $PIPE_NAME"
                tb push "$file" --force --yes || {
                  echo "::warning::Failed to push $file"
                }
              fi
            fi
          done
          
          echo "::notice::Deployed changes to CI branch (MV-feeding pipes skipped)"
          echo "::notice::Full deployment will occur on merge to main"

      - name: Validate Main Branch (Push to main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          TB_TOKEN: ${{ secrets.TINYBIRD_API_KEY }}
          TB_HOST: https://api.us-east.tinybird.co
        run: |
          cd packages/tb/tinybird
          # Ensure workspace context is set
          echo "Setting workspace context to 'barely'..."
          tb workspace use barely
          
          echo "Validating changes for main workspace..."
          tb deploy --dry-run --yes

  deploy:
    name: Deploy to Main Workspace
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Tinybird CLI
        run: |
          pip install tinybird-cli
          tb --version

      - name: Deploy to Main Workspace
        env:
          TB_TOKEN: ${{ secrets.TINYBIRD_API_KEY }}
          TB_HOST: https://api.us-east.tinybird.co
        run: |
          set -euo pipefail
          cd packages/tb/tinybird
          
          # Verify we're deploying from main branch
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [ "$CURRENT_BRANCH" != "main" ]; then
            echo "::error::Attempting to deploy from non-main branch: $CURRENT_BRANCH"
            exit 1
          fi
          
          # Establish workspace context first
          echo "Setting workspace context to 'barely'..."
          if ! tb workspace use barely; then
            echo "::error::Failed to set workspace context"
            exit 1
          fi
          
          echo "Ensuring we're on main branch..."
          if ! tb branch use main; then
            echo "::error::Failed to switch to main branch"
            exit 1
          fi

          # Show what will be deployed
          echo "Changes to be deployed:"
          tb diff || echo "No diff available (may need to run tb init --git)"

          echo "Deploying changes to main workspace..."
          # Use tb deploy for Git-integrated deployments
          echo "Using Git-integrated deployment..."
          if ! tb deploy --yes; then
            echo "::error::Deployment failed"
            echo "::error::To rollback: git revert the merge commit and re-deploy"
            exit 1
          fi
          
          echo "::notice::Successfully deployed to production"

      - name: Verify Deployment
        env:
          TB_TOKEN: ${{ secrets.TINYBIRD_API_KEY }}
          TB_HOST: https://api.us-east.tinybird.co
        run: |
          cd packages/tb/tinybird
          # Ensure workspace context is set
          tb workspace use barely
          
          echo "Verifying deployment..."
          tb workspace current

          # Show recent changes
          echo "\nRecent changes:"
          tb diff

  cleanup:
    name: Cleanup Tinybird Branches
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && (github.event.action == 'closed' || github.event.action == 'merged')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install tinybird-cli
          # Install neonctl for getting username
          curl -fsSL https://neon.tech/install.sh | sh

      - name: Remove CI Branch
        env:
          TB_TOKEN: ${{ secrets.TINYBIRD_API_KEY }}
          TB_HOST: https://api.us-east.tinybird.co
        run: |
          set -euo pipefail
          
          # Establish workspace context first
          if ! tb workspace use barely; then
            echo "::error::Failed to set workspace context for cleanup"
            exit 1
          fi
          
          BRANCH_NAME="ci_pr_${{ github.event.pull_request.number }}"
          echo "Removing CI branch: $BRANCH_NAME"
          
          # Check if branch exists before trying to remove
          if tb branch ls | grep -q "^$BRANCH_NAME"; then
            if tb branch rm "$BRANCH_NAME" --yes; then
              echo "::notice::Successfully removed CI branch: $BRANCH_NAME"
            else
              echo "::warning::Failed to remove CI branch: $BRANCH_NAME"
              # Don't fail the job for cleanup errors
            fi
          else
            echo "::notice::CI branch already removed or doesn't exist: $BRANCH_NAME"
          fi

      - name: Remove Dev Branches
        env:
          TB_TOKEN: ${{ secrets.TINYBIRD_API_KEY }}
          TB_HOST: https://api.us-east.tinybird.co
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
        run: |
          # Establish workspace context
          tb workspace use barely
          
          # Get the PR branch name from the closed PR
          PR_BRANCH="${{ github.head_ref }}"
          echo "PR branch was: $PR_BRANCH"
          
          # Get list of all Tinybird branches
          tb branch ls > branches.txt
          
          # Convert PR branch to Tinybird format (replace / and - with _)
          TB_BRANCH_PREFIX=$(echo "$PR_BRANCH" | tr '/' '_' | tr '-' '_')
          echo "Looking for dev branches matching pattern: ${TB_BRANCH_PREFIX}__dev_*"
          
          # Find and remove matching dev branches
          grep -E "^${TB_BRANCH_PREFIX}__dev_" branches.txt | while read -r branch_line; do
            # Extract branch name (first column)
            BRANCH_NAME=$(echo "$branch_line" | awk '{print $1}')
            if [ ! -z "$BRANCH_NAME" ]; then
              echo "Removing dev branch: $BRANCH_NAME"
              tb branch rm "$BRANCH_NAME" --yes || echo "Failed to remove branch: $BRANCH_NAME"
            fi
          done
          
          # Clean up
          rm -f branches.txt
