name: Production

on:
  pull_request:
  merge_group:
    types: [checks_requested]

jobs:
  # üëæ GIT METADATA üëæ #
  git-meta:
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'merge_group'
    outputs:
      git_pr_branch_name: ${{ steps.git-meta.outputs.github_commit_ref }}
      github_commit_sha: ${{ steps.git-meta.outputs.github_commit_sha }}
      github_commit_author_name: ${{ steps.git-meta.outputs.github_commit_author_name }}
      github_commit_author_login: ${{ steps.git-meta.outputs.github_commit_author_login }}
      github_deployment: ${{ steps.git-meta.outputs.github_deployment }}
      github_org: ${{ steps.git-meta.outputs.github_org }}
      github_repo: ${{ steps.git-meta.outputs.github_repo }}
      github_commit_org: ${{ steps.git-meta.outputs.github_commit_org }}
      github_commit_repo: ${{ steps.git-meta.outputs.github_commit_repo }}
      github_commit_message: ${{ steps.git-meta.outputs.github_commit_message }}
      github_commit_ref: ${{ steps.git-meta.outputs.github_commit_ref }}
      vercel_git_metadata: ${{ steps.git-meta.outputs.vercel_git_metadata }}
      db_changed: ${{ steps.db-changes.outputs.db_changed }}
      tb_changed: ${{ steps.tb-changes.outputs.tb_changed }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: git-meta
        run: |
          github_commit_author_login=${{ github.actor }}
          github_deployment=1
          github_org=${{ github.repository_owner }}
          github_repo=${{ github.repository }}
          github_commit_org=${{ github.repository_owner }}
          github_commit_repo=${{ github.repository }}
          github_commit_message=$(git show -s --format=%s)          

          commit_ref=${{ github.ref }}
          echo "commit_ref: $commit_ref"          

          pr_number=$(echo $commit_ref | awk -F'/' '{print $5}' | awk -F'-' '{print $2}')          
          pr_info=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number)

          github_commit_ref=$(echo $pr_info | jq -r '.head.ref')
          echo "github_commit_ref: $github_commit_ref"

          github_commit_sha=$(echo $pr_info | jq -r '.head.sha')
          echo "github_commit_sha: $github_commit_sha"

          if [ "$github_commit_ref" = "main" ]; then
            echo "Error: Cannot proceed with 'main' branch."
            exit 1
          fi

          # Escape quotes in commit message for shell safety
          escaped_commit_message=$(echo "$github_commit_message" | sed 's/"/\\"/g')

          vercel_git_metadata="-m githubCommitSha=$github_commit_sha -m githubCommitAuthorName=$github_commit_author_login -m githubCommitAuthorLogin=$github_commit_author_login -m githubDeployment=$github_deployment -m githubOrg=$github_org -m githubRepo=$github_repo -m githubCommitOrg=$github_commit_org -m githubCommitRepo=$github_commit_repo -m githubCommitMessage=\"$escaped_commit_message\" -m githubCommitRef=$github_commit_ref"                 

          echo "github_commit_sha=$github_commit_sha" >> $GITHUB_OUTPUT
          echo "github_commit_author_name=$github_commit_author_name" >> $GITHUB_OUTPUT
          echo "github_commit_author_login=$github_commit_author_login" >> $GITHUB_OUTPUT
          echo "github_deployment=$github_deployment" >> $GITHUB_OUTPUT
          echo "github_org=$github_org" >> $GITHUB_OUTPUT
          echo "github_repo=$github_repo" >> $GITHUB_OUTPUT
          echo "github_commit_org=$github_commit_org" >> $GITHUB_OUTPUT
          echo "github_commit_repo=$github_commit_repo" >> $GITHUB_OUTPUT
          echo "github_commit_message=$github_commit_message" >> $GITHUB_OUTPUT
          echo "github_commit_ref=$github_commit_ref" >> $GITHUB_OUTPUT
          echo "vercel_git_metadata=$vercel_git_metadata" >> $GITHUB_OUTPUT

      - name: check for db/const changes
        id: db-changes
        run: |
          # For merge groups, compare against main branch
          base_branch="main"

          # Fetch the base branch to ensure we have it locally
          git fetch origin $base_branch

          # Check if there are changes in packages/db or packages/const
          if git diff --name-only origin/$base_branch...HEAD | grep -E "^packages/(db|const)/" > /dev/null; then
            echo "db_changed=true" >> $GITHUB_OUTPUT
            echo "Changes detected in packages/db or packages/const"
          else
            echo "db_changed=false" >> $GITHUB_OUTPUT
            echo "No changes detected in packages/db or packages/const"
          fi

      - name: check for tinybird changes
        id: tb-changes
        run: |
          # For merge groups, compare against main branch
          base_branch="main"

          # Check if there are changes in packages/tb/tinybird
          if git diff --name-only origin/$base_branch...HEAD | grep -E "^packages/tb/tinybird/" > /dev/null; then
            echo "tb_changed=true" >> $GITHUB_OUTPUT
            echo "Changes detected in packages/tb/tinybird"
          else
            echo "tb_changed=false" >> $GITHUB_OUTPUT
            echo "No changes detected in packages/tb/tinybird"
          fi

  # üêò NEON DB:PUSH üêò #
  db-push:
    name: db:push
    needs: [git-meta]
    if: always() && github.event_name == 'merge_group' && needs.git-meta.result == 'success' && needs.git-meta.outputs.db_changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      neon_branch_id: ${{ steps.get-neon-branch.outputs.branch_id }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: setup node/pnpm/turbo/vercel
        uses: ./tooling/github/setup

      - name: install neon cli
        run: pnpm install -g neonctl

      - name: copy env
        shell: bash
        run: cp .env.example .env

      - id: get-neon-branch
        run: |
          echo branch_id=$(neonctl branches get main --project-id ${{ secrets.NEON_PROJECT_ID }} --api-key ${{ secrets.NEON_API_KEY }} --output json | jq -r '.id') >> $GITHUB_OUTPUT

      - name: db:push
        run: |
          rm -f .env
          touch .env

          echo DATABASE_URL=$(neonctl cs ${{ secrets.NEON_MAIN_BRANCH_NAME }} --project-id ${{ secrets.NEON_PROJECT_ID }} --role-name ${{ secrets.PG_USERNAME }} --database-name ${{ secrets.PG_DATABASE }} --api-key ${{ secrets.NEON_API_KEY }}) >> .env
          echo DIRECT_DATABASE_URL=$(neonctl cs ${{ secrets.NEON_MAIN_BRANCH_NAME }} --project-id ${{ secrets.NEON_PROJECT_ID }} --role-name ${{ secrets.PG_USERNAME }} --database-name ${{ secrets.PG_DATABASE }} --api-key ${{ secrets.NEON_API_KEY }}) >> .env

          # Run db:push with timeout to prevent hanging on interactive prompts
          output=$(timeout 180s bash -c 'echo "n" | pnpm db:push' 2>&1) || {
            echo "ERROR: db:push timed out or failed - likely requires interactive input"
            echo "output: $output"
            echo "Please run 'pnpm db:push' locally to handle any schema ambiguities"
            exit 1
          }

          echo "output: $output"

          # Check for successful completion
          if [[ $output != *"[‚úì] Changes applied"* ]] && [[ $output != *"No changes detected"* ]]; then
            echo "ERROR: db:push did not complete successfully"
            echo "Expected to see '[‚úì] Changes applied' or 'No changes detected' in output"
            
            # Check for known interactive prompt patterns
            if [[ $output == *"?"* ]] || [[ $output == *"‚Ä∫"* ]] || [[ $output == *"‚ùØ"* ]]; then
              echo "Detected interactive prompt - manual intervention required"
              echo "Please run 'pnpm db:push' locally to handle schema changes"
            fi
            
            exit 1
          fi

          echo "db:push completed successfully"

  # üêò TINYBIRD:PUSH üêò #
  tb-push:
    name: tb:push
    needs: [git-meta]
    if: always() && github.event_name == 'merge_group' && needs.git-meta.result == 'success' && needs.git-meta.outputs.tb_changed == 'true'
    env:
      TINYBIRD_HOST: ${{ secrets.TINYBIRD_HOST }}
      TINYBIRD_TOKEN: ${{ secrets.TINYBIRD_TOKEN }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Tinybird CLI
        run: curl https://tinybird.co | sh

      - name: Deploy to Production
        run: |
          cd packages/tb/tinybird
          tb --cloud --host ${{ env.TINYBIRD_HOST }} --token ${{ env.TINYBIRD_TOKEN }} deploy

  # üì± DEPLOY APPS -- PROD (Not Aliasing to Production Yet) #
  deploy-app:
    uses: ./.github/workflows/deploy-to-vercel.yml
    needs: [git-meta, db-push, tb-push]
    if: always() && needs.git-meta.result == 'success' && (needs.db-push.result == 'success' || needs.db-push.result == 'skipped') && (needs.tb-push.result == 'success' || needs.tb-push.result == 'skipped')
    with:
      app_name: app
      working_directory: apps/app
      scope: barely
      environment: production
      git_branch: ${{ needs.git-meta.outputs.github_commit_ref }}
      vercel_git_metadata: ${{ needs.git-meta.outputs.vercel_git_metadata }}
      delay_seconds: 0
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_APP_PROJECT_ID }}

  deploy-app-fm:
    uses: ./.github/workflows/deploy-to-vercel.yml
    needs: [git-meta, db-push, tb-push]
    if: always() && needs.git-meta.result == 'success' && (needs.db-push.result == 'success' || needs.db-push.result == 'skipped') && (needs.tb-push.result == 'success' || needs.tb-push.result == 'skipped')
    with:
      app_name: app
      working_directory: apps/app
      current_app_override: fm
      scope: barely
      environment: production
      git_branch: ${{ needs.git-meta.outputs.github_commit_ref }}
      vercel_git_metadata: ${{ needs.git-meta.outputs.vercel_git_metadata }}
      delay_seconds: 110
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_APP_FM_PROJECT_ID }}

  deploy-app-invoice:
    uses: ./.github/workflows/deploy-to-vercel.yml
    needs: [git-meta, db-push, tb-push]
    if: always() && needs.git-meta.result == 'success' && (needs.db-push.result == 'success' || needs.db-push.result == 'skipped') && (needs.tb-push.result == 'success' || needs.tb-push.result == 'skipped')
    with:
      app_name: app
      working_directory: apps/app
      current_app_override: invoice
      scope: barely
      environment: production
      git_branch: ${{ needs.git-meta.outputs.github_commit_ref }}
      vercel_git_metadata: ${{ needs.git-meta.outputs.vercel_git_metadata }}
      delay_seconds: 120
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_APP_INVOICE_PROJECT_ID }}

  deploy-bio:
    uses: ./.github/workflows/deploy-to-vercel.yml
    needs: [git-meta, db-push, tb-push]
    if: always() && needs.git-meta.result == 'success' && (needs.db-push.result == 'success' || needs.db-push.result == 'skipped') && (needs.tb-push.result == 'success' || needs.tb-push.result == 'skipped')
    with:
      app_name: bio
      working_directory: apps/bio
      scope: barely
      environment: production
      git_branch: ${{ needs.git-meta.outputs.github_commit_ref }}
      vercel_git_metadata: ${{ needs.git-meta.outputs.vercel_git_metadata }}
      delay_seconds: 10
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_BIO_PROJECT_ID }}

  deploy-cart:
    uses: ./.github/workflows/deploy-to-vercel.yml
    needs: [git-meta, db-push, tb-push]
    if: always() && needs.git-meta.result == 'success' && (needs.db-push.result == 'success' || needs.db-push.result == 'skipped') && (needs.tb-push.result == 'success' || needs.tb-push.result == 'skipped')
    with:
      app_name: cart
      working_directory: apps/cart
      scope: barely
      environment: production
      git_branch: ${{ needs.git-meta.outputs.github_commit_ref }}
      vercel_git_metadata: ${{ needs.git-meta.outputs.vercel_git_metadata }}
      delay_seconds: 20
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_CART_PROJECT_ID }}

  deploy-fm:
    uses: ./.github/workflows/deploy-to-vercel.yml
    needs: [git-meta, db-push, tb-push]
    if: always() && needs.git-meta.result == 'success' && (needs.db-push.result == 'success' || needs.db-push.result == 'skipped') && (needs.tb-push.result == 'success' || needs.tb-push.result == 'skipped')
    with:
      app_name: fm
      working_directory: apps/fm
      scope: barely
      environment: production
      git_branch: ${{ needs.git-meta.outputs.github_commit_ref }}
      vercel_git_metadata: ${{ needs.git-meta.outputs.vercel_git_metadata }}
      delay_seconds: 30
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_FM_PROJECT_ID }}

  deploy-invoice:
    uses: ./.github/workflows/deploy-to-vercel.yml
    needs: [git-meta, db-push, tb-push]
    if: always() && needs.git-meta.result == 'success' && (needs.db-push.result == 'success' || needs.db-push.result == 'skipped') && (needs.tb-push.result == 'success' || needs.tb-push.result == 'skipped')
    with:
      app_name: invoice
      working_directory: apps/invoice
      scope: barely
      environment: production
      git_branch: ${{ needs.git-meta.outputs.github_commit_ref }}
      vercel_git_metadata: ${{ needs.git-meta.outputs.vercel_git_metadata }}
      delay_seconds: 130
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_INVOICE_PROJECT_ID }}

  deploy-link:
    uses: ./.github/workflows/deploy-to-vercel.yml
    needs: [git-meta, db-push, tb-push]
    if: always() && needs.git-meta.result == 'success' && (needs.db-push.result == 'success' || needs.db-push.result == 'skipped') && (needs.tb-push.result == 'success' || needs.tb-push.result == 'skipped')
    with:
      app_name: link
      working_directory: apps/link
      scope: barely
      environment: production
      git_branch: ${{ needs.git-meta.outputs.github_commit_ref }}
      vercel_git_metadata: ${{ needs.git-meta.outputs.vercel_git_metadata }}
      delay_seconds: 40
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_LINK_PROJECT_ID }}

  deploy-manage-email:
    uses: ./.github/workflows/deploy-to-vercel.yml
    needs: [git-meta, db-push, tb-push]
    if: always() && needs.git-meta.result == 'success' && (needs.db-push.result == 'success' || needs.db-push.result == 'skipped') && (needs.tb-push.result == 'success' || needs.tb-push.result == 'skipped')
    with:
      app_name: manage-email
      working_directory: apps/manage-email
      scope: barely
      environment: production
      git_branch: ${{ needs.git-meta.outputs.github_commit_ref }}
      vercel_git_metadata: ${{ needs.git-meta.outputs.vercel_git_metadata }}
      delay_seconds: 50
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_MANAGE_EMAIL_PROJECT_ID }}

  deploy-nyc:
    uses: ./.github/workflows/deploy-to-vercel.yml
    needs: [git-meta, db-push, tb-push]
    if: always() && needs.git-meta.result == 'success' && (needs.db-push.result == 'success' || needs.db-push.result == 'skipped') && (needs.tb-push.result == 'success' || needs.tb-push.result == 'skipped')
    with:
      app_name: nyc
      working_directory: apps/nyc
      scope: barely
      environment: production
      git_branch: ${{ needs.git-meta.outputs.github_commit_ref }}
      vercel_git_metadata: ${{ needs.git-meta.outputs.vercel_git_metadata }}
      delay_seconds: 60
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_NYC_PROJECT_ID }}

  deploy-page:
    uses: ./.github/workflows/deploy-to-vercel.yml
    needs: [git-meta, db-push, tb-push]
    if: |
      always() && 
      needs.git-meta.result == 'success' && 
      (needs.db-push.result == 'success' || needs.db-push.result == 'skipped') &&
      (needs.tb-push.result == 'success' || needs.tb-push.result == 'skipped')
    with:
      app_name: page
      working_directory: apps/page
      scope: barely
      environment: production
      git_branch: ${{ needs.git-meta.outputs.github_commit_ref }}
      vercel_git_metadata: ${{ needs.git-meta.outputs.vercel_git_metadata }}
      delay_seconds: 70
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PAGE_PROJECT_ID }}

  deploy-press:
    uses: ./.github/workflows/deploy-to-vercel.yml
    needs: [git-meta, db-push, tb-push]
    if: always() && needs.git-meta.result == 'success' && (needs.db-push.result == 'success' || needs.db-push.result == 'skipped') && (needs.tb-push.result == 'success' || needs.tb-push.result == 'skipped')
    with:
      app_name: press
      working_directory: apps/press
      scope: barely
      environment: production
      git_branch: ${{ needs.git-meta.outputs.github_commit_ref }}
      vercel_git_metadata: ${{ needs.git-meta.outputs.vercel_git_metadata }}
      delay_seconds: 80
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PRESS_PROJECT_ID }}

  deploy-vip:
    uses: ./.github/workflows/deploy-to-vercel.yml
    needs: [git-meta, db-push, tb-push]
    if: always() && needs.git-meta.result == 'success' && (needs.db-push.result == 'success' || needs.db-push.result == 'skipped') && (needs.tb-push.result == 'success' || needs.tb-push.result == 'skipped')
    with:
      app_name: vip
      working_directory: apps/vip
      scope: barely
      environment: production
      git_branch: ${{ needs.git-meta.outputs.github_commit_ref }}
      vercel_git_metadata: ${{ needs.git-meta.outputs.vercel_git_metadata }}
      delay_seconds: 90
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_VIP_PROJECT_ID }}

  deploy-www:
    uses: ./.github/workflows/deploy-to-vercel.yml
    needs: [git-meta, db-push, tb-push]
    if: always() && needs.git-meta.result == 'success' && (needs.db-push.result == 'success' || needs.db-push.result == 'skipped') && (needs.tb-push.result == 'success' || needs.tb-push.result == 'skipped')
    with:
      app_name: www
      working_directory: apps/www
      scope: barely
      environment: production
      git_branch: ${{ needs.git-meta.outputs.github_commit_ref }}
      vercel_git_metadata: ${{ needs.git-meta.outputs.vercel_git_metadata }}
      delay_seconds: 100
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_WWW_PROJECT_ID }}

  # trigger.dev
  trigger-production:
    name: trigger production
    needs:
      [
        git-meta,
        db-push,
        tb-push,
        deploy-app,
        deploy-app-fm,
        deploy-bio,
        deploy-cart,
        deploy-link,
        deploy-manage-email,
        deploy-nyc,
        deploy-page,
        deploy-press,
        deploy-vip,
        deploy-www,
      ]
    if: always() && github.event_name == 'merge_group' # skip if pull request, which allows entry into merge queue
    permissions:
      actions: read
    runs-on: ubuntu-latest
    steps:
      - name: Transform outcomes to JSON
        env:
          NEEDS_JSON: '${{ toJson(needs) }}'
        run: |
          echo "ALL_SUCCESS=$(echo "$NEEDS_JSON" | jq '. | to_entries | map([.value.result == "success", .value.result == "skipped"] | any) | all')" >> $GITHUB_ENV
      - name: Check outcomes
        run: '[ $ALL_SUCCESS = true ]'
      - uses: actions/checkout@v4

      - name: setup node/pnpm/turbo/vercel
        uses: ./tooling/github/setup

      - name: deploy trigger.dev
        env:
          TRIGGER_ACCESS_TOKEN: ${{ secrets.TRIGGER_ACCESS_TOKEN }}
        run: cd packages/lib && pnpm dlx trigger.dev@3.3.17 deploy

  # üîÄ MERGE PR BRANCH TO MAIN üîÄ
  production--can-merge:
    needs:
      [
        git-meta,
        db-push,
        tb-push,
        deploy-app,
        deploy-app-fm,
        deploy-bio,
        deploy-cart,
        deploy-fm,
        deploy-link,
        deploy-manage-email,
        deploy-nyc,
        deploy-page,
        deploy-press,
        deploy-vip,
        deploy-www,
        trigger-production,
      ]
    if: always() && github.event_name == 'merge_group' # skip if pull request, which allows entry into merge queue
    permissions:
      actions: read
    runs-on: ubuntu-latest
    steps:
      - name: Transform outcomes to JSON
        env:
          NEEDS_JSON: '${{ toJson(needs) }}'
        run: |
          echo "ALL_SUCCESS=$(echo "$NEEDS_JSON" | jq '. | to_entries | map([.value.result == "success", .value.result == "skipped"] | any) | all')" >> $GITHUB_ENV
      - name: Check outcomes
        run: '[ $ALL_SUCCESS = true ]'

  # üöÄ PROMOTE APPS TO PRODUCTION DOMAINS üöÄ #
  # -- at a later date, we could decouple this promotion step from deploying & merging to main

  promote-app:
    name: promote app to production
    needs: [production--can-merge, deploy-app]
    if: always() && github.event_name == 'merge_group' && needs.production--can-merge.result == 'success'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_APP_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Promote app to production
        run: vercel promote dpl_${{ needs.deploy-app.outputs.deployment_id }} --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  promote-app-fm:
    name: promote app-fm to production
    needs: [production--can-merge, deploy-app-fm]
    if: always() && github.event_name == 'merge_group' && needs.production--can-merge.result == 'success'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_APP_FM_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Promote app-fm to production
        run: vercel promote dpl_${{ needs.deploy-app-fm.outputs.deployment_id }} --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  promote-app-invoice:
    name: promote app-invoice to production
    needs: [production--can-merge, deploy-app-invoice]
    if: always() && github.event_name == 'merge_group' && needs.production--can-merge.result == 'success'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_APP_INVOICE_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Promote app-invoice to production
        run: vercel promote dpl_${{ needs.deploy-app-invoice.outputs.deployment_id }} --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  promote-bio:
    name: promote bio to production
    needs: [production--can-merge, deploy-bio]
    if: always() && github.event_name == 'merge_group' && needs.production--can-merge.result == 'success'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_BIO_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Promote bio to production
        run: vercel promote dpl_${{ needs.deploy-bio.outputs.deployment_id }} --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  promote-cart:
    name: promote cart to production
    needs: [production--can-merge, deploy-cart]
    if: always() && github.event_name == 'merge_group' && needs.production--can-merge.result == 'success'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_CART_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Promote cart to production
        run: vercel promote dpl_${{ needs.deploy-cart.outputs.deployment_id }} --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  promote-fm:
    name: promote fm to production
    needs: [production--can-merge, deploy-fm]
    if: always() && github.event_name == 'merge_group' && needs.production--can-merge.result == 'success'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_FM_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Promote fm to production
        run: vercel promote dpl_${{ needs.deploy-fm.outputs.deployment_id }} --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  promote-invoice:
    name: promote invoice to production
    needs: [production--can-merge, deploy-invoice]
    if: always() && github.event_name == 'merge_group' && needs.production--can-merge.result == 'success'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_INVOICE_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Promote invoice to production
        run: vercel promote dpl_${{ needs.deploy-invoice.outputs.deployment_id }} --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  promote-link:
    name: promote link to production
    needs: [production--can-merge, deploy-link]
    if: always() && github.event_name == 'merge_group' && needs.production--can-merge.result == 'success'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_LINK_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Promote link to production
        run: vercel promote dpl_${{ needs.deploy-link.outputs.deployment_id }} --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  promote-manage-email:
    name: promote manage-email to production
    needs: [production--can-merge, deploy-manage-email]
    if: always() && github.event_name == 'merge_group' && needs.production--can-merge.result == 'success'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_MANAGE_EMAIL_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Promote manage-email to production
        run: vercel promote dpl_${{ needs.deploy-manage-email.outputs.deployment_id }} --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  promote-nyc:
    name: promote nyc to production
    needs: [production--can-merge, deploy-nyc]
    if: always() && github.event_name == 'merge_group' && needs.production--can-merge.result == 'success'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_NYC_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Promote nyc to production
        run: vercel promote dpl_${{ needs.deploy-nyc.outputs.deployment_id }} --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  promote-page:
    name: promote page to production
    needs: [production--can-merge, deploy-page]
    if: always() && github.event_name == 'merge_group' && needs.production--can-merge.result == 'success'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PAGE_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Promote page to production
        run: vercel promote dpl_${{ needs.deploy-page.outputs.deployment_id }} --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  promote-press:
    name: promote press to production
    needs: [production--can-merge, deploy-press]
    if: always() && github.event_name == 'merge_group' && needs.production--can-merge.result == 'success'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PRESS_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Promote press to production
        run: vercel promote dpl_${{ needs.deploy-press.outputs.deployment_id }} --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  promote-vip:
    name: promote vip to production
    needs: [production--can-merge, deploy-vip]
    if: always() && github.event_name == 'merge_group' && needs.production--can-merge.result == 'success'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_VIP_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Promote vip to production
        run: vercel promote dpl_${{ needs.deploy-vip.outputs.deployment_id }} --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  promote-www:
    name: promote www to production
    needs: [production--can-merge, deploy-www]
    if: always() && github.event_name == 'merge_group' && needs.production--can-merge.result == 'success'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_WWW_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Promote www to production
        run: vercel promote dpl_${{ needs.deploy-www.outputs.deployment_id }} --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  # üö® ROLLBACK APPS (IF ANY PROMOTION FAILS) üö® #
  # ref: https://dev.to/philw_/using-vercels-instant-rollback-feature-in-your-own-cicd-pipeline-57oi

  rollback-app:
    name: rollback app if any deployments fail
    needs:
      [
        promote-app,
        promote-app-fm,
        promote-app-invoice,
        promote-bio,
        promote-cart,
        promote-fm,
        promote-invoice,
        promote-link,
        promote-manage-email,
        promote-page,
        promote-press,
        promote-nyc,
        promote-vip,
        promote-www,
      ]
    if: ${{ failure() && needs.promote-app.result == 'success' }}
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_APP_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Rollback app
        run: |
          ROLLBACK_DEPLOYMENT_ID=$(curl -s "https://api.vercel.com/v6/deployments?teamId=${{ secrets.VERCEL_TEAM_ID }}&projectId=${{ secrets.VERCEL_APP_PROJECT_ID}}&limit=2&rollbackCandidate=true&state=READY&target=production" -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" | jq -r '.deployments[1].uid')
          echo "Rolling back to the previous deployment ID: $ROLLBACK_DEPLOYMENT_ID"
          vercel rollback $ROLLBACK_DEPLOYMENT_ID --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  rollback-cart:
    name: rollback cart if any deployments fail
    needs:
      [
        promote-app,
        promote-app-fm,
        promote-app-invoice,
        promote-bio,
        promote-cart,
        promote-fm,
        promote-invoice,
        promote-link,
        promote-manage-email,
        promote-page,
        promote-press,
        promote-nyc,
        promote-www,
      ]
    if: ${{ failure() && needs.promote-cart.result == 'success' }}
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_CART_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Rollback cart
        run: |
          ROLLBACK_DEPLOYMENT_ID=$(curl -s "https://api.vercel.com/v6/deployments?teamId=${{ secrets.VERCEL_TEAM_ID }}&projectId=${{ secrets.VERCEL_CART_PROJECT_ID}}&limit=2&rollbackCandidate=true&state=READY&target=production" -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" | jq -r '.deployments[1].uid')
          echo "Rolling back to the previous deployment ID: $ROLLBACK_DEPLOYMENT_ID"
          vercel rollback $ROLLBACK_DEPLOYMENT_ID --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  rollback-fm:
    name: rollback fm if any deployments fail
    needs:
      [
        promote-app,
        promote-app-fm,
        promote-app-invoice,
        promote-bio,
        promote-cart,
        promote-fm,
        promote-invoice,
        promote-bio,
        promote-link,
        promote-manage-email,
        promote-page,
        promote-press,
        promote-nyc,
        promote-vip,
        promote-www,
      ]
    if: ${{ failure() && needs.promote-fm.result == 'success' }}
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_FM_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Rollback fm
        run: |
          ROLLBACK_DEPLOYMENT_ID=$(curl -s "https://api.vercel.com/v6/deployments?teamId=${{ secrets.VERCEL_TEAM_ID }}&projectId=${{ secrets.VERCEL_FM_PROJECT_ID}}&limit=2&rollbackCandidate=true&state=READY&target=production" -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" | jq -r '.deployments[1].uid')
          echo "Rolling back to the previous deployment ID: $ROLLBACK_DEPLOYMENT_ID"
          vercel rollback $ROLLBACK_DEPLOYMENT_ID --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  rollback-app-fm:
    name: rollback app-fm if any deployments fail
    needs:
      [
        promote-app,
        promote-app-fm,
        promote-app-invoice,
        promote-bio,
        promote-cart,
        promote-fm,
        promote-invoice,
        promote-bio,
        promote-link,
        promote-manage-email,
        promote-page,
        promote-press,
        promote-nyc,
        promote-vip,
        promote-www,
      ]
    if: ${{ failure() && needs.promote-app-fm.result == 'success' }}
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_APP_FM_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Rollback app-fm
        run: |
          ROLLBACK_DEPLOYMENT_ID=$(curl -s "https://api.vercel.com/v6/deployments?teamId=${{ secrets.VERCEL_TEAM_ID }}&projectId=${{ secrets.VERCEL_APP_FM_PROJECT_ID}}&limit=2&rollbackCandidate=true&state=READY&target=production" -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" | jq -r '.deployments[1].uid')
          echo "Rolling back to the previous deployment ID: $ROLLBACK_DEPLOYMENT_ID"
          vercel rollback $ROLLBACK_DEPLOYMENT_ID --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  rollback-link:
    name: rollback link if any deployments fail
    needs:
      [
        promote-app,
        promote-app-fm,
        promote-app-invoice,
        promote-bio,
        promote-cart,
        promote-fm,
        promote-invoice,
        promote-bio,
        promote-link,
        promote-manage-email,
        promote-page,
        promote-press,
        promote-nyc,
        promote-vip,
        promote-www,
      ]
    if: ${{ failure() && needs.promote-link.result == 'success' }}
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_LINK_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Rollback link
        run: |
          ROLLBACK_DEPLOYMENT_ID=$(curl -s "https://api.vercel.com/v6/deployments?teamId=${{ secrets.VERCEL_TEAM_ID }}&projectId=${{ secrets.VERCEL_LINK_PROJECT_ID}}&limit=2&rollbackCandidate=true&state=READY&target=production" -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" | jq -r '.deployments[1].uid')
          echo "Rolling back to the previous deployment ID: $ROLLBACK_DEPLOYMENT_ID"
          vercel rollback $ROLLBACK_DEPLOYMENT_ID --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  rollback-manage-email:
    name: rollback manage-email if any deployments fail
    needs:
      [
        promote-app,
        promote-app-fm,
        promote-app-invoice,
        promote-bio,
        promote-cart,
        promote-fm,
        promote-invoice,
        promote-bio,
        promote-link,
        promote-manage-email,
        promote-page,
        promote-press,
        promote-nyc,
        promote-vip,
        promote-www,
      ]
    if: ${{ failure() && needs.promote-manage-email.result == 'success' }}
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_MANAGE_EMAIL_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Rollback manage-email
        run: |
          ROLLBACK_DEPLOYMENT_ID=$(curl -s "https://api.vercel.com/v6/deployments?teamId=${{ secrets.VERCEL_TEAM_ID }}&projectId=${{ secrets.VERCEL_MANAGE_EMAIL_PROJECT_ID}}&limit=2&rollbackCandidate=true&state=READY&target=production" -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" | jq -r '.deployments[1].uid')
          echo "Rolling back to the previous deployment ID: $ROLLBACK_DEPLOYMENT_ID"
          vercel rollback $ROLLBACK_DEPLOYMENT_ID --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  rollback-page:
    name: rollback page if any deployments fail
    needs:
      [
        promote-app,
        promote-app-fm,
        promote-app-invoice,
        promote-bio,
        promote-cart,
        promote-fm,
        promote-invoice,
        promote-bio,
        promote-nyc,
        promote-link,
        promote-manage-email,
        promote-page,
        promote-press,
        promote-nyc,
        promote-www,
      ]
    if: ${{ failure() && needs.promote-page.result == 'success' }}
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PAGE_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Rollback page
        run: |
          ROLLBACK_DEPLOYMENT_ID=$(curl -s "https://api.vercel.com/v6/deployments?teamId=${{ secrets.VERCEL_TEAM_ID }}&projectId=${{ secrets.VERCEL_PAGE_PROJECT_ID}}&limit=2&rollbackCandidate=true&state=READY&target=production" -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" | jq -r '.deployments[1].uid')
          echo "Rolling back to the previous deployment ID: $ROLLBACK_DEPLOYMENT_ID"
          vercel rollback $ROLLBACK_DEPLOYMENT_ID --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  rollback-press:
    name: rollback press if any deployments fail
    needs:
      [
        promote-app,
        promote-app-fm,
        promote-app-invoice,
        promote-bio,
        promote-cart,
        promote-fm,
        promote-invoice,
        promote-bio,
        promote-link,
        promote-manage-email,
        promote-page,
        promote-press,
        promote-nyc,
        promote-www,
      ]
    if: ${{ failure() && needs.promote-press.result == 'success' }}
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PRESS_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Rollback press
        run: |
          ROLLBACK_DEPLOYMENT_ID=$(curl -s "https://api.vercel.com/v6/deployments?teamId=${{ secrets.VERCEL_TEAM_ID }}&projectId=${{ secrets.VERCEL_PRESS_PROJECT_ID}}&limit=2&rollbackCandidate=true&state=READY&target=production" -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" | jq -r '.deployments[1].uid')
          echo "Rolling back to the previous deployment ID: $ROLLBACK_DEPLOYMENT_ID"
          vercel rollback $ROLLBACK_DEPLOYMENT_ID --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  rollback-nyc:
    name: rollback nyc if any deployments fail
    needs:
      [
        promote-app,
        promote-app-fm,
        promote-app-invoice,
        promote-bio,
        promote-cart,
        promote-link,
        promote-manage-email,
        promote-page,
        promote-press,
        promote-nyc,
        promote-www,
      ]
    if: ${{ failure() && needs.promote-nyc.result == 'success' }}
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_NYC_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Rollback nyc
        run: |
          ROLLBACK_DEPLOYMENT_ID=$(curl -s "https://api.vercel.com/v6/deployments?teamId=${{ secrets.VERCEL_TEAM_ID }}&projectId=${{ secrets.VERCEL_NYC_PROJECT_ID}}&limit=2&rollbackCandidate=true&state=READY&target=production" -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" | jq -r '.deployments[1].uid')
          echo "Rolling back to the previous deployment ID: $ROLLBACK_DEPLOYMENT_ID"
          vercel rollback $ROLLBACK_DEPLOYMENT_ID --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  rollback-vip:
    name: rollback vip if any deployments fail
    needs:
      [
        promote-app,
        promote-app-fm,
        promote-bio,
        promote-cart,
        promote-fm,
        promote-invoice,
        promote-bio,
        promote-link,
        promote-manage-email,
        promote-page,
        promote-press,
        promote-nyc,
        promote-vip,
        promote-www,
      ]
    if: ${{ failure() && needs.promote-vip.result == 'success' }}
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_VIP_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Rollback vip
        run: |
          ROLLBACK_DEPLOYMENT_ID=$(curl -s "https://api.vercel.com/v6/deployments?teamId=${{ secrets.VERCEL_TEAM_ID }}&projectId=${{ secrets.VERCEL_VIP_PROJECT_ID}}&limit=2&rollbackCandidate=true&state=READY&target=production" -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" | jq -r '.deployments[1].uid')
          echo "Rolling back to the previous deployment ID: $ROLLBACK_DEPLOYMENT_ID"
          vercel rollback $ROLLBACK_DEPLOYMENT_ID --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  rollback-www:
    name: rollback www if any deployments fail
    needs:
      [
        promote-app,
        promote-app-fm,
        promote-app-invoice,
        promote-bio,
        promote-cart,
        promote-fm,
        promote-invoice,
        promote-bio,
        promote-link,
        promote-manage-email,
        promote-page,
        promote-press,
        promote-nyc,
        promote-www,
      ]
    if: ${{ failure() && needs.promote-www.result == 'success' }}
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_WWW_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Rollback www
        run: |
          ROLLBACK_DEPLOYMENT_ID=$(curl -s "https://api.vercel.com/v6/deployments?teamId=${{ secrets.VERCEL_TEAM_ID }}&projectId=${{ secrets.VERCEL_WWW_PROJECT_ID}}&limit=2&rollbackCandidate=true&state=READY&target=production" -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" | jq -r '.deployments[1].uid')
          echo "Rolling back to the previous deployment ID: $ROLLBACK_DEPLOYMENT_ID"
          vercel rollback $ROLLBACK_DEPLOYMENT_ID --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  rollback-bio:
    name: rollback bio if any deployments fail
    needs:
      [
        promote-app,
        promote-app-fm,
        promote-app-invoice,
        promote-bio,
        promote-cart,
        promote-fm,
        promote-invoice,
        promote-bio,
        promote-link,
        promote-manage-email,
        promote-page,
        promote-press,
        promote-nyc,
        promote-vip,
        promote-www,
      ]
    if: ${{ failure() && needs.promote-bio.result == 'success' }}
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_BIO_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Rollback bio
        run: |
          ROLLBACK_DEPLOYMENT_ID=$(curl -s "https://api.vercel.com/v6/deployments?teamId=${{ secrets.VERCEL_TEAM_ID }}&projectId=${{ secrets.VERCEL_BIO_PROJECT_ID}}&limit=2&rollbackCandidate=true&state=READY&target=production" -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" | jq -r '.deployments[1].uid')
          echo "Rolling back to the previous deployment ID: $ROLLBACK_DEPLOYMENT_ID"
          vercel rollback $ROLLBACK_DEPLOYMENT_ID --scope=barely --token=${{ secrets.VERCEL_TOKEN }}

  # üßπ CLEAN UP üßπ #

  delete-neon-branch:
    needs:
      [
        git-meta,
        db-push,
        production--can-merge,
        promote-app,
        promote-app-fm,
        promote-app-invoice,
        promote-bio,
        promote-cart,
        promote-fm,
        promote-link,
        promote-manage-email,
        promote-nyc,
        promote-page,
        promote-press,
        promote-vip,
        promote-www,
      ]
    if:
      always() && github.event_name == 'merge_group' && needs.git-meta.outputs.git_pr_branch_name != 'main' &&
      needs.production--can-merge.result == 'success' &&
      needs.promote-app.result == 'success' &&
      needs.promote-app-fm.result == 'success' &&
      needs.promote-bio.result == 'success' &&
      needs.promote-cart.result == 'success' &&
      needs.promote-fm.result == 'success' &&
      needs.promote-link.result == 'success' &&
      needs.promote-manage-email.result == 'success' &&
      needs.promote-nyc.result == 'success' &&
      needs.promote-page.result == 'success' &&
      needs.promote-press.result == 'success' &&
      needs.promote-vip.result == 'success' &&
      needs.promote-www.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: install neon cli
        run: npm i -g neonctl

      - name: delete neon preview branch
        run: neonctl branches delete ${{ needs.git-meta.outputs.git_pr_branch_name }} --project-id ${{ secrets.NEON_PROJECT_ID }} --api-key ${{ secrets.NEON_API_KEY }}

      - name: delete neon dev branches
        run: |
          # Fetch the current PR branch name
          PR_BRANCH_NAME=${{ needs.git-meta.outputs.git_pr_branch_name }}
          # List all branches using neonctl and filter those matching the pattern
          MATCHING_BRANCHES=$(neonctl branches list --project-id ${{ secrets.NEON_PROJECT_ID }} --api-key ${{ secrets.NEON_API_KEY }} | grep "$PR_BRANCH_NAME"__dev_ | awk '{print $2}')
          # Loop through the filtered list and delete each matching branch
          for BRANCH in $MATCHING_BRANCHES; do
            echo "Deleting branch: $BRANCH"
            neonctl branches delete $BRANCH --project-id ${{ secrets.NEON_PROJECT_ID }} --api-key ${{ secrets.NEON_API_KEY }}
          done
