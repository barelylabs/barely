name: Production

on:
  pull_request:
  merge_group:
    types: [checks_requested]

jobs:
  #/////////////////////
  # 👾 GIT METADATA 👾 #
  #////////////////////

  git-meta:
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'merge_group'
    outputs:
      git_pr_branch_name: ${{ steps.git-meta.outputs.github_commit_ref }}
      github_commit_sha: ${{ steps.git-meta.outputs.github_commit_sha }}
      github_commit_author_name: ${{ steps.git-meta.outputs.github_commit_author_name }}
      github_commit_author_login: ${{ steps.git-meta.outputs.github_commit_author_login }}
      github_deployment: ${{ steps.git-meta.outputs.github_deployment }}
      github_org: ${{ steps.git-meta.outputs.github_org }}
      github_repo: ${{ steps.git-meta.outputs.github_repo }}
      github_commit_org: ${{ steps.git-meta.outputs.github_commit_org }}
      github_commit_repo: ${{ steps.git-meta.outputs.github_commit_repo }}
      github_commit_message: ${{ steps.git-meta.outputs.github_commit_message }}
      github_commit_ref: ${{ steps.git-meta.outputs.github_commit_ref }}
      vercel_git_metadata: ${{ steps.git-meta.outputs.vercel_git_metadata }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - id: git-meta
        run: |
          github_commit_author_login=${{ github.actor }}
          github_deployment=1
          github_org=${{ github.repository_owner }}
          github_repo=${{ github.repository }}
          github_commit_org=${{ github.repository_owner }}
          github_commit_repo=${{ github.repository }}
          github_commit_message=$(git show -s --format=%)          

          commit_ref=${{ github.ref }}
          echo "commit_ref: $commit_ref"          

          pr_number=$(echo $commit_ref | awk -F'/' '{print $5}' | awk -F'-' '{print $2}')          
          pr_info=$(curl -s H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number)

          github_commit_ref=$(echo $pr_info | jq -r '.head.ref')
          echo "github_commit_ref: $github_commit_ref"

          github_commit_sha=$(echo $pr_info | jq -r '.head.sha')
          echo "github_commit_sha: $github_commit_sha"

          if [ "$github_commit_ref" = "main" ]; then
            echo "Error: Cannot proceed with 'main' branch."
            exit 1
          fi

          vercel_git_metadata="-m githubCommitSha=$github_commit_sha -m githubCommitAuthorName=$github_commit_author_login -m githubCommitAuthorLogin=$github_commit_author_login -m githubDeployment=$github_deployment -m githubOrg=$github_org -m githubRepo=$github_repo -m githubCommitOrg=$github_commit_org -m githubCommitRepo=$github_commit_repo -m githubCommitMessage=\"$github_commit_message\" -m githubCommitRef=$github_commit_ref"                 

          echo "github_commit_sha=$github_commit_sha" >> $GITHUB_OUTPUT
          echo "github_commit_author_name=$github_commit_author_name" >> $GITHUB_OUTPUT
          echo "github_commit_author_login=$github_commit_author_login" >> $GITHUB_OUTPUT
          echo "github_deployment=$github_deployment" >> $GITHUB_OUTPUT
          echo "github_org=$github_org" >> $GITHUB_OUTPUT
          echo "github_repo=$github_repo" >> $GITHUB_OUTPUT
          echo "github_commit_org=$github_commit_org" >> $GITHUB_OUTPUT
          echo "github_commit_repo=$github_commit_repo" >> $GITHUB_OUTPUT
          echo "github_commit_message=$github_commit_message" >> $GITHUB_OUTPUT
          echo "github_commit_ref=$github_commit_ref" >> $GITHUB_OUTPUT
          echo "vercel_git_metadata=$vercel_git_metadata" >> $GITHUB_OUTPUT

  #/////////////////////
  # 🐘 NEON DB:PUSH 🐘 #
  #////////////////////

  db-push:
    name: db:push
    needs: [git-meta]
    if: always() && github.event_name == 'merge_group' && needs.git-meta.result == 'success'
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      neon_branch_id: ${{ steps.get-neon-branch.outputs.branch_id }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: setup node/pnpm/turbo/vercel
        uses: ./tooling/github/setup

      - name: install neon cli
        run: pnpm install -g neonctl

      - name: copy env
        shell: bash
        run: cp .env.example .env

      - id: get-neon-branch
        run: |
          echo branch_id=$(neonctl branches get main --project-id ${{ secrets.NEON_PROJECT_ID }} --api-key ${{ secrets.NEON_API_KEY }} --output json | jq -r '.id') >> $GITHUB_OUTPUT

      - name: db:push
        run: |
          rm -f .env
          touch .env

          echo DATABASE_URL=$(neonctl cs ${{ secrets.NEON_MAIN_BRANCH_NAME }} --project-id ${{ secrets.NEON_PROJECT_ID }} --role-name ${{ secrets.PG_USERNAME }} --database-name ${{ secrets.PG_DATABASE }} --api-key ${{ secrets.NEON_API_KEY }}) >> .env
          echo DIRECT_DATABASE_URL=$(neonctl cs ${{ secrets.NEON_MAIN_BRANCH_NAME }} --project-id ${{ secrets.NEON_PROJECT_ID }} --role-name ${{ secrets.PG_USERNAME }} --database-name ${{ secrets.PG_DATABASE }} --api-key ${{ secrets.NEON_API_KEY }}) >> .env

          pnpm db:push

  #////////////////////////////////////////////////////////////
  # 📱 DEPLOY APP -- PROD (Not Aliasing to Production Yet) 📱 #
  #///////////////////////////////////////////////////////////

  deploy-app:
    name: deploy prod build to vercel -- app
    needs: [git-meta, db-push]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'merge_group' && needs.db-push.result == 'success'
    env:
      TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      TURBO_TEAM: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_APP_PROJECT_ID }}
    outputs:
      deployment_id: ${{ steps.deploy.outputs.deployment_id }}
      deployment_url: ${{ steps.deploy.outputs.deployment_url }}
      inspect_url: ${{ steps.deploy.outputs.inspect_url }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: setup node/pnpm/turbo/vercel
        uses: ./tooling/github/setup

      - name: link vercel
        run: |
          pnpm vercel link --repo --scope=barelylabs --yes --token=${{ secrets.VERCEL_TOKEN }}
          pnpm vercel link --cwd apps/app --scope=barelylabs --yes --token=${{ secrets.VERCEL_TOKEN }}

      - name: pull vercel
        run: |
          pnpm vercel pull --cwd apps/app --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

          VERCEL_URL=app.barely.io
          sed -i '/VERCEL_URL/d' ./apps/app/.vercel/.env.production.local
          echo "VERCEL_URL=$VERCEL_URL" >> ./apps/app/.vercel/.env.production.local
          cp ./apps/app/.vercel/.env.production.local .env

      - name: build project artifacts
        run: turbo build:prod --filter=@barely/app --token=${{ secrets.VERCEL_TOKEN }}

      - name: deploy to vercel
        id: deploy
        run: |
          deploy_url=$(pnpm vercel deploy --cwd apps/app --prebuilt --prod --skip-domain ${{ needs.git-meta.outputs.vercel_git_metadata }} --token=${{ secrets.VERCEL_TOKEN }})
          echo deploy_url=$deploy_url >> $GITHUB_OUTPUT

          inspect=$(pnpm vercel inspect $deploy_url --token=${{ secrets.VERCEL_TOKEN }} 2>&1)
          deployment_id=$(echo "$inspect" | grep -m 1 '^    id' | awk '{print $NF}' | cut -d'_' -f 2-)
          echo "deployment_id=$deployment_id" >> $GITHUB_OUTPUT
          inspect_url="https://vercel.com/barelylabs/app/$deployment_id"
          echo "inspect_url=$inspect_url" >> $GITHUB_OUTPUT

  #/////////////////////////////////////////////////////////////
  # 🔗 DEPLOY LINK --PROD  (Not Aliasing to Production Yet) 🔗 #
  #////////////////////////////////////////////////////////////

  deploy-link:
    name: deploy prod build to vercel -- link
    needs: [git-meta, db-push, git-meta]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'merge_group' && needs.db-push.result == 'success'
    env:
      TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      TURBO_TEAM: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_LINK_PROJECT_ID }}
    outputs:
      deployment_id: ${{ steps.deploy.outputs.deployment_id }}
      deployment_url: ${{ steps.deploy.outputs.deployment_url }}
      inspect_url: ${{ steps.deploy.outputs.inspect_url }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: setup node/pnpm/turbo/vercel
        uses: ./tooling/github/setup

      - name: link vercel
        run: |
          pnpm vercel link --repo --scope=barelylabs --yes --token=${{ secrets.VERCEL_TOKEN }}
          pnpm vercel link --cwd apps/link --scope=barelylabs --yes --token=${{ secrets.VERCEL_TOKEN }}

      - name: pull vercel
        run: |
          pnpm vercel pull --cwd apps/link --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

          VERCEL_URL=barely.link
          sed -i '/VERCEL_URL/d' ./apps/link/.vercel/.env.production.local
          echo "VERCEL_URL=$VERCEL_URL" >> ./apps/link/.vercel/.env.production.local
          cp ./apps/link/.vercel/.env.production.local .env

      - name: build project artifacts
        run: turbo build:prod --filter=@barely/link --token=${{ secrets.VERCEL_TOKEN }}

      - name: deploy to vercel
        id: deploy
        run: |
          deploy_url=$(pnpm vercel deploy --cwd apps/link --prebuilt --prod --skip-domain ${{ needs.git-meta.outputs.vercel_git_metadata }} --token=${{ secrets.VERCEL_TOKEN }})
          echo deploy_url=$deploy_url >> $GITHUB_OUTPUT

          inspect=$(pnpm vercel inspect $deploy_url --token=${{ secrets.VERCEL_TOKEN }} 2>&1)
          deployment_id=$(echo "$inspect" | grep -m 1 '^    id' | awk '{print $NF}' | cut -d'_' -f 2-)
          echo "deployment_id=$deployment_id" >> $GITHUB_OUTPUT
          inspect_url="https://vercel.com/barelylabs/link/$deployment_id"
          echo "inspect_url=$inspect_url" >> $GITHUB_OUTPUT

  #/////////////////////////////
  # 🔀 MERGE PR BRANCH TO MAIN 🔀
  #/////////////////////////////

  production--can-merge:
    needs: [git-meta, db-push, deploy-app, deploy-link]
    if: always() && github.event_name == 'merge_group' # skip if pull request, which allows entry into merge queue
    permissions:
      actions: read
    runs-on: ubuntu-latest
    steps:
      - name: Transform outcomes to JSON
        env:
          NEEDS_JSON: "${{ toJson(needs) }}"
        run: |
          echo "ALL_SUCCESS=$(echo "$NEEDS_JSON" | jq '. | to_entries | map([.value.result == "success", .value.result == "skipped"] | any) | all')" >> $GITHUB_ENV
      - name: Check outcomes
        run: "[ $ALL_SUCCESS = true ]"

  #//////////////////////////////////////////
  # 🚀 PROMOTE APPS TO PRODUCTION DOMAINS 🚀 #
  #//////////////////////////////////////////
  # -- at a later date, we could decouple this promotion step from deploying & merging to main

  promote-app:
    name: promote app to production
    needs: [production--can-merge, deploy-app]
    if: always() && github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_APP_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Promote app to production
        run: vercel promote dpl_${{ needs.deploy-app.outputs.deployment_id }} --scope=barelylabs --token=${{ secrets.VERCEL_TOKEN }}

  promote-link:
    name: promote link to production
    needs: [production--can-merge, deploy-link]
    if: always() && github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_LINK_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Promote link to production
        run: vercel promote dpl_${{ needs.deploy-link.outputs.deployment_id }} --scope=barelylabs --token=${{ secrets.VERCEL_TOKEN }}

  #///////////////////////////////////////////////
  # 🚨 ROLLBACK APPS (IF ANY PROMOTION FAILS) 🚨 #
  #//////////////////////////////////////////////

  # ref: https://dev.to/philw_/using-vercels-instant-rollback-feature-in-your-own-cicd-pipeline-57oi

  rollback-app:
    name: rollback app if any deployments fail
    needs: [promote-app, promote-link]
    if: ${{ failure() && needs.promote-app.result == 'success' }}
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_APP_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Rollback app
        run: |
          ROLLBACK_DEPLOYMENT_ID=$(curl -s "https://api.vercel.com/v6/deployments?teamId=${{ secrets.VERCEL_TEAM_ID }}&projectId=${{ secrets.VERCEL_APP_PROJECT_ID}}&limit=2&rollbackCandidate=true&state=READY&target=production" -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" | jq -r '.deployments[1].uid')
          echo "Rolling back to the previous deployment ID: $ROLLBACK_DEPLOYMENT_ID"
          vercel rollback $ROLLBACK_DEPLOYMENT_ID --scope=barelylabs --token=${{ secrets.VERCEL_TOKEN }}

  rollback-link:
    name: rollback link if any deployments fail
    needs: [promote-app, promote-link]
    if: ${{ failure() && needs.promote-link.result == 'success' }}
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_LINK_PROJECT_ID }}
    steps:
      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Rollback link
        run: |
          ROLLBACK_DEPLOYMENT_ID=$(curl -s "https://api.vercel.com/v6/deployments?teamId=${{ secrets.VERCEL_TEAM_ID }}&projectId=${{ secrets.VERCEL_LINK_PROJECT_ID}}&limit=2&rollbackCandidate=true&state=READY&target=production" -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" | jq -r '.deployments[1].uid')
          echo "Rolling back to the previous deployment ID: $ROLLBACK_DEPLOYMENT_ID"
          vercel rollback $ROLLBACK_DEPLOYMENT_ID --scope=barelylabs --token=${{ secrets.VERCEL_TOKEN }}

  #/////////////#
  # 🧹 CLEAN UP #
  #/////////////#

  delete-neon-branch:
    needs: [git-meta, db-push, promote-app, promote-link]
    if: always() && github.event_name == 'merge_group' && needs.git-meta.outputs.git_pr_branch_name != 'main'
    runs-on: ubuntu-latest
    steps:
      - name: install neon cli
        run: npm i -g neonctl

      - name: delete neon branch
        run: neonctl branches delete ${{ needs.git-meta.outputs.git_pr_branch_name }} --project-id ${{ secrets.NEON_PROJECT_ID }} --api-key ${{ secrets.NEON_API_KEY }}
