# neon ref: https://neon.tech/blog/branching-with-preview-environments

name: Deploy Preview

on: [pull_request]

jobs:
  neon-preview:
    name: neon preview
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      VERCEL_ACCESS_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_APP_PROJECT_ID }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v7

      - name: Install the Neon CLI
        run: npm install -g neonctl

      # This is just so the env check doesn't fail on missing variables.
      # DATABASE_URL && DATABASE_POOL_URL will be overwritten below.
      - name: Copy env
        shell: bash
        run: cp .env.example .env

      # If the branch already exists, this command will fail but the workflow will continue
      - name: Create a Neon branch
        id: create-branch
        run: |
          output=$(neonctl branches create --project-id ${{ secrets.NEON_PROJECT_ID }} --name ${{ steps.branch-name.outputs.current_branch }} --api-key ${{ secrets.NEON_API_KEY }} --compute --type read_write 2>&1) || true
          if [[ $output == *"branch with the provided name \"${{ steps.branch-name.outputs.current_branch }}\" already exists"* ]]; then
            echo "A branch named \"${{ steps.branch-name.outputs.current_branch }}\" already exists. Using that branch for this preview deployment."
          elif [[ -n $output ]]; then
            echo "Unhandled error: $output" && exit 1
          fi

      # The branch ID is needed to display the URL of the branch in the comment.
      - name: Get Neon branch
        id: get-neon-branch
        run: |
          echo branch_id=$(neonctl branches get ${{ steps.branch-name.outputs.current_branch }} --project-id ${{ secrets.NEON_PROJECT_ID }} --api-key ${{ secrets.NEON_API_KEY }} --output json | jq -r '.id') >> $GITHUB_OUTPUT
          echo DATABASE_URL=$(neonctl connection-string ${{ steps.branch-name.outputs.current_branch }} --project-id ${{ secrets.NEON_PROJECT_ID }} --role-name ${{ secrets.PG_USERNAME }} --database-name ${{ secrets.PG_DATABASE }} --api-key ${{ secrets.NEON_API_KEY }})?sslmode=require >> $GITHUB_ENV
          echo DATABASE_POOL_URL=$(neonctl connection-string ${{ steps.branch-name.outputs.current_branch }} --pooled --project-id ${{ secrets.NEON_PROJECT_ID }} --role-name ${{ secrets.PG_USERNAME }} --database-name ${{ secrets.PG_DATABASE }} --api-key ${{ secrets.NEON_API_KEY }})?sslmode=require >> $GITHUB_ENV

      # Setup node/pnpm/turbo
      - name: Setup
        uses: ./tooling/github/setup

      - name: Install Vercel CLI
        run: |
          npm install --global vercel@latest

      - name: db:push
        id: drizzle
        run: |
          rm -f .env
          touch .env          

          echo "DATABASE_URL: $DATABASE_URL"
          echo "DATABASE_POOL_URL: $DATABASE_POOL_URL"

          echo "DATABASE_URL=$DATABASE_URL" >> .env          
          echo "DATABASE_POOL_URL=$DATABASE_POOL_URL" >> .env

          pnpm db:push

      # For now, we're manually removing and re-adding the environment variables. Might be a simpler way to directly replace them, but got errors when trying to do that.
      - name: Update Vercel Environment Variables for App Preview Branch
        run: |
          echo "DATABASE_URL: $DATABASE_URL"  
          echo "DATABASE_POOL_URL: $DATABASE_POOL_URL"                  

          branch_name=${{ steps.branch-name.outputs.current_branch }}

          if vercel env ls preview $branch_name --token=${{ secrets.VERCEL_TOKEN }} | grep -q DATABASE_URL; then
            vercel env rm DATABASE_URL preview pg --yes --token=${{ secrets.VERCEL_TOKEN }}
          fi

          if vercel env ls preview $branch_name --token=${{ secrets.VERCEL_TOKEN }} | grep -q DATABASE_POOL_URL; then
            vercel env rm DATABASE_POOL_URL preview pg --yes --token=${{ secrets.VERCEL_TOKEN }}
          fi          

          echo $DATABASE_URL | vercel env add DATABASE_URL preview ${{ steps.branch-name.outputs.current_branch }} --token=${{ secrets.VERCEL_TOKEN }}
          echo $DATABASE_POOL_URL | vercel env add DATABASE_POOL_URL preview ${{ steps.branch-name.outputs.current_branch }} --token=${{ secrets.VERCEL_TOKEN }}

      # - name: Update Vercel Env Variables for Link Preview Branch
      #   env:
      #     VERCEL_PROJECT_ID: ${{ secrets.VERCEL_LINK_PROJECT_ID }}
      #   run: |
      #     branch_name=${{ steps.branch-name.outputs.current_branch }}

      #     if vercel env ls preview $branch_name --token=${{ secrets.VERCEL_TOKEN }} | grep -q DATABASE_URL; then
      #       vercel env rm DATABASE_URL preview $branch_name --yes --token=${{ secrets.VERCEL_TOKEN }}
      #     fi

      #     if vercel env ls preview $branch_name --token=${{ secrets.VERCEL_TOKEN }} | grep -q DATABASE_POOL_URL; then
      #       vercel env rm DATABASE_POOL_URL preview $branch_name --yes --token=${{ secrets.VERCEL_TOKEN }}
      #     fi

      #     echo $DATABASE_URL | vercel env add DATABASE_URL preview $branch_name --token=${{ secrets.VERCEL_TOKEN }}
      #     echo $DATABASE_POOL_URL | vercel env add DATABASE_POOL_URL preview $branch_name --token=${{ secrets.VERCEL_TOKEN }}

    outputs:
      git_branch_name: ${{ steps.branch-name.outputs.current_branch }}
      neon_branch_id: ${{ steps.get-neon-branch.outputs.branch_id }}

  app-deploy:
    name: vercel preview - app.barely.io
    needs: [neon-preview]
    runs-on: ubuntu-latest
    env:
      VERCEL_ACCESS_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_APP_PROJECT_ID }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup
        uses: ./tooling/github/setup

      - name: Install Vercel CLI
        run: |
          npm install --global vercel@latest

      - name: Vercel Env
        id: vercel-env
        run: |
          vercel pull --yes --environment=preview --git-branch=${{ needs.neon-preview.outputs.git_branch_name }} --token=${{ secrets.VERCEL_TOKEN }} 

          echo "VERCEL PULLED"

          cp .vercel/.env.preview.local .env

          echo ".env COPIED"

          echo "VERCEL_URL before: $(grep -oP 'VERCEL_URL="\K[^"]+' .env)"

          if ! grep -q "VERCEL_URL" .env; then
            echo "VERCEL_URL=test.app" >> .env
          else
            perl -i -ne 'print unless /VERCEL_URL/' .env
            echo "VERCEL_URL=test.app" >> .env
          fi           

          echo "VERCEL_URL after: $(grep -oP 'VERCEL_URL="\K[^"]+' .env)"

          DATABASE_URL=$(grep -oP 'DATABASE_URL="\K[^"]+' .env)
          DATABASE_POOL_URL=$(grep -oP 'DATABASE_POOL_URL="\K[^"]+' .env)
          VERCEL_URL=$(grep -oP 'VERCEL_URL="\K[^"]+' .env)

          echo "DATABASE_URL: $DATABASE_URL"
          echo "DATABASE_POOL_URL: $DATABASE_POOL_URL"
          echo "VERCEL_URL: $VERCEL_URL"

      - name: Build App Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy App Preview to Vercel
        id: deploy-app
        run: |
          preview_url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN}})
          echo "preview_url=$preview_url" >> $GITHUB_ENV
          deployment_id=$(vercel inspect https://app-dyz0u5a4v-barelylabs.vercel.app | grep -oP 'id\s+dpl_\K.*')
          inspect_url="https://vercel.com/${{ secrets.VERCEL_TEAM_ID }}/${{ secrets.VERCEL_APP_PROJECT_ID }}/$deployment_id"
          echo "inspect_url=$inspect_url" >> $GITHUB_ENV

      - name: Comment on Pull Request
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            app preview :rocket: : https://${{ steps.deploy-app.outputs.preview_url }}
            app inspect :mag: : https://${{ steps.deploy-app.outputs.inspect_url }}
            neon branch :elephant: : https://console.neon.tech/app/projects/${{ secrets.NEON_PROJECT_ID }}/branches/${{ needs.neon-preview.outputs.neon_branch_id }}

  # link-deploy:

  # www-deploy:
