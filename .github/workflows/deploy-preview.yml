# neon ref: https://neon.tech/blog/branching-with-preview-environments

name: Deploy Preview

on: [pull_request]

jobs:
  neon-preview:
    name: neon preview
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      VERCEL_ACCESS_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_APP_PROJECT_ID }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v7

      - name: Install the Neon CLI
        run: npm install -g neonctl

      # This is just so the env check doesn't fail on missing variables.
      # DATABASE_URL && DATABASE_POOL_URL will be overwritten below.
      - name: Copy env
        shell: bash
        run: cp .env.example .env

      # If the branch already exists, this command will fail but the workflow will continue
      - name: Create a Neon branch
        id: create-branch
        run: |
          output=$(neonctl branches create --project-id ${{ secrets.NEON_PROJECT_ID }} --name ${{ steps.branch-name.outputs.current_branch }} --api-key ${{ secrets.NEON_API_KEY }} --compute --type read_write 2>&1) || true
          if [[ $output == *"branch with the provided name \"${{ steps.branch-name.outputs.current_branch }}\" already exists"* ]]; then
            echo "A branch named \"${{ steps.branch-name.outputs.current_branch }}\" already exists. Using that branch for this preview deployment."
          elif [[ -n $output ]]; then
            echo "Unhandled error: $output" && exit 1
          fi

      # The branch ID is needed to display the URL of the branch in the comment.
      - name: Get Neon branch
        id: get-neon-branch
        run: |
          branch_id=$(neonctl branches get ${{ steps.branch-name.outputs.current_branch }} --project-id ${{ secrets.NEON_PROJECT_ID }} --api-key ${{ secrets.NEON_API_KEY }} --output json | jq -r '.id')
          echo "branch_id=$branch_id" >> $GITHUB_ENV          
          DATABASE_URL=$(neonctl connection-string ${{ steps.branch-name.outputs.current_branch }} --project-id ${{ secrets.NEON_PROJECT_ID }} --role-name ${{ secrets.PG_USERNAME }} --database-name ${{ secrets.PG_DATABASE }} --api-key ${{ secrets.NEON_API_KEY }} | tr -d '\n')?sslmode=require
          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
          DATABASE_POOL_URL=$(neonctl connection-string ${{ steps.branch-name.outputs.current_branch }} --pooled --project-id ${{ secrets.NEON_PROJECT_ID }} --role-name ${{ secrets.PG_USERNAME }} --database-name ${{ secrets.PG_DATABASE }} --api-key ${{ secrets.NEON_API_KEY }} | tr -d '\n')?sslmode=require
          echo "DATABASE_POOL_URL=$DATABASE_POOL_URL" >> $GITHUB_ENV

      # Setup node/pnpm/turbo
      # - name: Setup
      #   uses: ./tooling/github/setup

      # - name: Install Vercel CLI
      #   run: |
      #     npm install --global vercel@latest

      # - name: db:push
      #   id: drizzle
      #   run: |
      #     rm -f .env
      #     touch .env

      #     echo "DATABASE_URL: $DATABASE_URL"
      #     echo "DATABASE_POOL_URL: $DATABASE_POOL_URL"

      #     echo "DATABASE_URL=$DATABASE_URL" >> .env
      #     echo "DATABASE_POOL_URL=$DATABASE_POOL_URL" >> .env

      #     pnpm db:push

      # Using Vercel as our secret store for the DATABASE_URL and DATABASE_POOL_URL
      # -- to my knowledge, using an external store is the only way to pass secrets between Github Actions jobs?
      # - name: Update Vercel Environment Variables for App Preview Branch
      #   run: |
      #     echo "DATABASE_URL: $DATABASE_URL"
      #     echo "DATABASE_POOL_URL: $DATABASE_POOL_URL"

      #     branch_name=${{ steps.branch-name.outputs.current_branch }}

      #     if vercel env ls preview $branch_name --token=${{ secrets.VERCEL_TOKEN }} | grep -q DATABASE_URL; then
      #       vercel env rm DATABASE_URL preview pg --yes --token=${{ secrets.VERCEL_TOKEN }}
      #     fi

      #     if vercel env ls preview $branch_name --token=${{ secrets.VERCEL_TOKEN }} | grep -q DATABASE_POOL_URL; then
      #       vercel env rm DATABASE_POOL_URL preview pg --yes --token=${{ secrets.VERCEL_TOKEN }}
      #     fi

      #     echo $DATABASE_URL | vercel env add DATABASE_URL preview ${{ steps.branch-name.outputs.current_branch }} --token=${{ secrets.VERCEL_TOKEN }}
      #     echo $DATABASE_POOL_URL | vercel env add DATABASE_POOL_URL preview ${{ steps.branch-name.outputs.current_branch }} --token=${{ secrets.VERCEL_TOKEN }}

      # - name: Update Vercel Env Variables for Link Preview Branch
      #   env:
      #     VERCEL_PROJECT_ID: ${{ secrets.VERCEL_LINK_PROJECT_ID }}
      #   run: |
      #     branch_name=${{ steps.branch-name.outputs.current_branch }}

      #     if vercel env ls preview $branch_name --token=${{ secrets.VERCEL_TOKEN }} | grep -q DATABASE_URL; then
      #       vercel env rm DATABASE_URL preview $branch_name --yes --token=${{ secrets.VERCEL_TOKEN }}
      #     fi

      #     if vercel env ls preview $branch_name --token=${{ secrets.VERCEL_TOKEN }} | grep -q DATABASE_POOL_URL; then
      #       vercel env rm DATABASE_POOL_URL preview $branch_name --yes --token=${{ secrets.VERCEL_TOKEN }}
      #     fi

      #     echo $DATABASE_URL | vercel env add DATABASE_URL preview $branch_name --token=${{ secrets.VERCEL_TOKEN }}
      #     echo $DATABASE_POOL_URL | vercel env add DATABASE_POOL_URL preview $branch_name --token=${{ secrets.VERCEL_TOKEN }}

    outputs:
      git_branch_name: ${{ steps.branch-name.outputs.current_branch }}
      neon_branch_id: ${{ steps.get-neon-branch.outputs.branch_id }}

  app-deploy:
    name: vercel preview - app.barely.io
    needs: [neon-preview]
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      TURBO_TEAM: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_APP_PROJECT_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha}}

      - name: Git Branch Info
        id: git-info
        run: |
          github_commit_sha=${{ github.event.pull_request.head.sha }}
          github_commit_author_name=${{ github.event.pull_request.user.name }}          
          github_commit_author_login=${{ github.event.pull_request.user.login }}
          github_deployment=1
          github_org=${{ github.repository_owner }}
          github_repo=${{ github.repository }}
          github_commit_org=${{ github.repository_owner }}
          github_commit_repo=${{ github.repository }}
          github_commit_message=$(git show -s --format=%s $github_commit_sha)
          github_commit_ref=${{ github.event.pull_request.head.ref }}

          github_branch_name=${{ github.event.pull_request.head.ref }}
          github_deployment_id=${{ github.event.pull_request.id }}

          echo "Git Branch Info:"
          echo "github_commit_sha=$github_commit_sha"
          echo "github_commit_author_name=$github_commit_author_name"
          echo "github_commit_author_login=$github_commit_author_login"
          echo "github_deployment=$github_deployment"
          echo "github_org=$github_org"
          echo "github_repo=$github_repo"
          echo "github_commit_org=$github_commit_org"
          echo "github_commit_repo=$github_commit_repo"
          echo "github_commit_message=$github_commit_message"
          echo "github_commit_ref=$github_commit_ref"

          echo "github_branch_name=$github_branch_name"
          echo "github_deployment_id=$github_deployment_id"

          echo "github_commit_sha=$github_commit_sha" >> $GITHUB_OUTPUT
          echo "github_commit_author_name=$github_commit_author_name" >> $GITHUB_OUTPUT
          echo "github_commit_author_login=$github_commit_author_login" >> $GITHUB_OUTPUT
          echo "github_deployment=$github_deployment" >> $GITHUB_OUTPUT
          echo "github_org=$github_org" >> $GITHUB_OUTPUT
          echo "github_repo=$github_repo" >> $GITHUB_OUTPUT
          echo "github_commit_org=$github_commit_org" >> $GITHUB_OUTPUT
          echo "github_commit_repo=$github_commit_repo" >> $GITHUB_OUTPUT
          echo "github_commit_message=$github_commit_message" >> $GITHUB_OUTPUT
          echo "github_commit_ref=$github_commit_ref" >> $GITHUB_OUTPUT

      - name: Cache turbo build setup
        uses: actions/cache@v3
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Setup
        uses: ./tooling/github/setup

      - name: Install Vercel CLI
        run: |
          npm install --global vercel@latest
        # vercel link --repo --scope=barelylabs --yes --token=$VERCEL_TOKEN
        # cd apps/app
        # vercel link --scope=barelylabs --yes --token=${{ secrets.VERCEL_TOKEN }}
        # cd ../..

      - name: Pull Vercel Environment Information
        id: vercel-env
        run: |
          vercel pull --yes --environment=preview --git-branch=${{ needs.neon-preview.outputs.git_branch_name }} --token=${{ secrets.VERCEL_TOKEN }} 

          VERCEL_URL=app-git-${{ needs.neon-preview.outputs.git_branch_name }}-barelylabs.vercel.app
          sed -i '/VERCEL_URL/d' .vercel/.env.preview.local
          echo "VERCEL_URL=\"$VERCEL_URL\"" >> .vercel/.env.preview.local                    
          cp .vercel/.env.preview.local .env

          echo ".env:"
          cat .env

      - name: Build App Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      # Using this to get the git branch/commit info for the preview deployment.
      # Realizing we might be able to add inline to vercel deploy --build-env
      - name: Deploy App Preview to Vercel
        id: deploy-app
        run: |
          echo preview-url=$(vercel deploy --prebuilt -m githubCommitSha=${{ steps.git-info.outputs.github_commit_sha }} -m githubCommitAuthorName=${{ steps.git-info.outputs.github_commit_author_name }} -m githubCommitAuthorLogin=${{ steps.git-info.outputs.github_commit_author_login }} -m githubDeployment=${{ steps.git-info.outputs.github_deployment }} -m githubOrg=${{ steps.git-info.outputs.github_org }} -m githubRepo=${{ steps.git-info.outputs.github_repo }} -m githubCommitOrg=${{ steps.git-info.outputs.github_commit_org }} -m githubCommitRepo=${{ steps.git-info.outputs.github_commit_repo }} -m githubCommitMessage="${{ steps.git-info.outputs.github_commit_message }}" -m githubCommitRef=${{ steps.git-info.outputs.github_commit_ref }} -m githubBranchName=${{ steps.git-info.outputs.github_branch_name }} -m githubDeploymentId=${{ steps.git-info.outputs.github_deployment_id }} --token=${{ secrets.VERCEL_TOKEN }}) >> $GITHUB_OUTPUT

      - name: Inspect App Preview
        id: inspect-app
        run: |
          echo "preview_url : ${{ steps.deploy-app.outputs.preview-url }}"          

          inspect=$(vercel inspect ${{ steps.deploy-app.outputs.preview-url}} --token=${{ secrets.VERCEL_TOKEN }} 2>&1)
          deployment_id=$(echo "$inspect" | grep -m 1 '^    id' | awk '{print $NF}' | cut -d'_' -f 2-)
          echo "deployment_id: ${deployment_id}"        

          inspect_url="https://vercel.com/barelylabs/${{ secrets.VERCEL_APP_PROJECT_ID }}/$deployment_id"
          echo "inspect_url=$inspect_url" >> $GITHUB_OUTPUT

      - name: Comment on Pull Request
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            app inspect :mag: : ${{ steps.inspect-app.outputs.inspect_url }}
            app preview :rocket: : ${{ steps.deploy-app.outputs.preview-url }}

            neon branch :elephant: : https://console.neon.tech/app/projects/${{ secrets.NEON_PROJECT_ID }}/branches/${{ needs.neon-preview.outputs.neon_branch_id }}

      # - name: Deploy App Preview to Vercel
      #   id: deploy-app
      #   run: |
      #     echo preview_url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}) >> $GITHUB_OUTPUT
      #   #   deployment_id=$(vercel inspect $preview_url --token=${{ secrets.VERCEL_TOKEN }} | grep -oP 'id\s+dpl_\K.*')
      #   #   inspect_url="https://vercel.com/${{ secrets.VERCEL_TEAM_ID }}/${{ secrets.VERCEL_APP_PROJECT_ID }}/$deployment_id"
      #   #   echo "inspect_url=$inspect_url" >> $GITHUB_ENV

  # link-deploy:

  # www-deploy:
