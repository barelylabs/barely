# neon ref: https://neon.tech/blog/branching-with-preview-environments

name: Deploy Preview

on: [pull_request]

jobs:
  #/////////////////#
  # 👾 GIT METADATA #
  #/////////////////#

  git-meta:
    name: git metadata
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Git Metadata
        id: git-meta
        run: |
          github_commit_sha=${{ github.event.pull_request.head.sha }}          
          github_commit_author_login=${{ github.event.pull_request.user.login }}
          github_deployment=1
          github_org=${{ github.repository_owner }}
          github_repo=${{ github.repository }}
          github_commit_org=${{ github.repository_owner }}
          github_commit_repo=${{ github.repository }}
          github_commit_message=$(git show -s --format=%s $github_commit_sha)
          github_commit_ref=${{ github.event.pull_request.head.ref }}

          vercel_git_metadata="-m githubCommitSha=$github_commit_sha -m githubCommitAuthorName=$github_commit_author_login -m githubCommitAuthorLogin=$github_commit_author_login -m githubDeployment=$github_deployment -m githubOrg=$github_org -m githubRepo=$github_repo -m githubCommitOrg=$github_commit_org -m githubCommitRepo=$github_commit_repo -m githubCommitMessage=\"$github_commit_message\" -m githubCommitRef=$github_commit_ref"                 

          echo "github_commit_sha=$github_commit_sha" >> $GITHUB_OUTPUT
          echo "github_commit_author_name=$github_commit_author_name" >> $GITHUB_OUTPUT
          echo "github_commit_author_login=$github_commit_author_login" >> $GITHUB_OUTPUT
          echo "github_deployment=$github_deployment" >> $GITHUB_OUTPUT
          echo "github_org=$github_org" >> $GITHUB_OUTPUT
          echo "github_repo=$github_repo" >> $GITHUB_OUTPUT
          echo "github_commit_org=$github_commit_org" >> $GITHUB_OUTPUT
          echo "github_commit_repo=$github_commit_repo" >> $GITHUB_OUTPUT
          echo "github_commit_message=$github_commit_message" >> $GITHUB_OUTPUT
          echo "github_commit_ref=$github_commit_ref" >> $GITHUB_OUTPUT
          echo "vercel_git_metadata=$vercel_git_metadata" >> $GITHUB_OUTPUT

    outputs:
      git_branch_name: ${{ steps.git-meta.outputs.github_commit_ref }}
      github_commit_sha: ${{ steps.git-meta.outputs.github_commit_sha }}
      github_commit_author_name: ${{ steps.git-meta.outputs.github_commit_author_name }}
      github_commit_author_login: ${{ steps.git-meta.outputs.github_commit_author_login }}
      github_deployment: ${{ steps.git-meta.outputs.github_deployment }}
      github_org: ${{ steps.git-meta.outputs.github_org }}
      github_repo: ${{ steps.git-meta.outputs.github_repo }}
      github_commit_org: ${{ steps.git-meta.outputs.github_commit_org }}
      github_commit_repo: ${{ steps.git-meta.outputs.github_commit_repo }}
      github_commit_message: ${{ steps.git-meta.outputs.github_commit_message }}
      github_commit_ref: ${{ steps.git-meta.outputs.github_commit_ref }}
      vercel_git_metadata: ${{ steps.git-meta.outputs.vercel_git_metadata }}

  #////////////////////#
  # 🐘 NEON DB PREVIEW #
  #////////////////////#

  neon-preview:
    name: neon preview
    needs: [git-meta]
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      VERCEL_ACCESS_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_APP_PROJECT_ID }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup node/pnpm/turbo
        uses: ./tooling/github/setup

      - name: Install the Neon CLI
        run: pnpm install -g neonctl

      # This is just so the env check doesn't fail on missing variables.
      # DATABASE_URL && DATABASE_POOL_URL will be overwritten below.
      - name: Copy env
        shell: bash
        run: cp .env.example .env

      # If the branch already exists, this command will fail but the workflow will continue
      - name: Create a Neon branch
        id: create-branch
        run: |
          output=$(neonctl branches create --project-id ${{ secrets.NEON_PROJECT_ID }} --name ${{ needs.git-meta.outputs.git_branch_name }} --api-key ${{ secrets.NEON_API_KEY }} --compute --type read_write 2>&1) || true          
          if [[ $output == *"branch with the provided name \"${{ needs.git-meta.outputs.git_branch_name }}\" already exists"* ]]; then
            echo "A branch named \"${{ needs.git-meta.outputs.git_branch_name }}\" already exists. Using that branch for this preview deployment."
          elif [[ $output == *"ERROR:"* ]]; then
            echo "Unhandled error: $output" && exit 1
          fi

      # The branch ID is needed to display the URL of the branch in the comment.
      - name: Get Neon branch
        id: get-neon-branch
        run: |
          branch_id=$(neonctl branches get ${{ needs.git-meta.outputs.git_branch_name }} --project-id ${{ secrets.NEON_PROJECT_ID }} --api-key ${{ secrets.NEON_API_KEY }} --output json | jq -r '.id')
          echo "branch_id=$branch_id" >> $GITHUB_ENV          

          DATABASE_URL=$(neonctl connection-string ${{ needs.git-meta.outputs.git_branch_name }} --project-id ${{ secrets.NEON_PROJECT_ID }} --role-name ${{ secrets.PG_USERNAME }} --database-name ${{ secrets.PG_DATABASE }} --api-key ${{ secrets.NEON_API_KEY }} | tr -d '\n')?sslmode=require
          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV

          DATABASE_POOL_URL=$(neonctl connection-string ${{ needs.git-meta.outputs.git_branch_name }} --pooled --project-id ${{ secrets.NEON_PROJECT_ID }} --role-name ${{ secrets.PG_USERNAME }} --database-name ${{ secrets.PG_DATABASE }} --api-key ${{ secrets.NEON_API_KEY }} | tr -d '\n')?sslmode=require
          echo "DATABASE_POOL_URL=$DATABASE_POOL_URL" >> $GITHUB_ENV

      - name: db:push
        id: drizzle
        run: |
          rm -f .env
          touch .env

          echo "DATABASE_URL: $DATABASE_URL"
          echo "DATABASE_POOL_URL: $DATABASE_POOL_URL"

          echo "DATABASE_URL=$DATABASE_URL" >> .env
          echo "DATABASE_POOL_URL=$DATABASE_POOL_URL" >> .env

          pnpm db:push

      # Using Vercel as our secret store for the DATABASE_URL and DATABASE_POOL_URL
      # -- to my knowledge, using an external store is the only way to pass secrets between Github Actions jobs?
      - name: Install Vercel CLI
        run: |
          npm install --global vercel@latest

      - name: Update Vercel Env Variables for App Preview Branch
        run: |
          echo "DATABASE_URL: $DATABASE_URL"
          echo "DATABASE_POOL_URL: $DATABASE_POOL_URL"

          branch_name=${{ needs.git-meta.outputs.git_branch_name }}

          if vercel env ls preview $branch_name --token=${{ secrets.VERCEL_TOKEN }} | grep -q DATABASE_URL; then
            vercel env rm DATABASE_URL preview $branch_name --yes --token=${{ secrets.VERCEL_TOKEN }}
          fi

          if vercel env ls preview $branch_name --token=${{ secrets.VERCEL_TOKEN }} | grep -q DATABASE_POOL_URL; then
            vercel env rm DATABASE_POOL_URL preview $branch_name --yes --token=${{ secrets.VERCEL_TOKEN }}
          fi

          echo $DATABASE_URL | vercel env add DATABASE_URL preview $branch_name --token=${{ secrets.VERCEL_TOKEN }}
          echo $DATABASE_POOL_URL | vercel env add DATABASE_POOL_URL preview $branch_name --token=${{ secrets.VERCEL_TOKEN }}

      - name: Update Vercel Env Variables for Link Preview Branch
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_LINK_PROJECT_ID }}
        run: |
          branch_name=${{ needs.git-meta.outputs.git_branch_name }}

          if vercel env ls preview $branch_name --token=${{ secrets.VERCEL_TOKEN }} | grep -q DATABASE_URL; then
            vercel env rm DATABASE_URL preview $branch_name --yes --token=${{ secrets.VERCEL_TOKEN }}
          fi

          if vercel env ls preview $branch_name --token=${{ secrets.VERCEL_TOKEN }} | grep -q DATABASE_POOL_URL; then
            vercel env rm DATABASE_POOL_URL preview $branch_name --yes --token=${{ secrets.VERCEL_TOKEN }}
          fi

          echo $DATABASE_URL | vercel env add DATABASE_URL preview $branch_name --token=${{ secrets.VERCEL_TOKEN }}
          echo $DATABASE_POOL_URL | vercel env add DATABASE_POOL_URL preview $branch_name --token=${{ secrets.VERCEL_TOKEN }}

    outputs:
      neon_branch_id: ${{ steps.get-neon-branch.outputs.branch_id }}

  #///////////////////////#
  # 📱 DEPLOY APP PREVIEW #
  #//////////////////////#

  app-deploy:
    name: vercel preview - app
    needs: [neon-preview, git-meta]
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      TURBO_TEAM: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_APP_PROJECT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup
        uses: ./tooling/github/setup

      - name: Install Vercel CLI
        run: |
          pnpm install --global vercel@latest
          vercel link --repo --scope=barelylabs --yes --token=${{ secrets.VERCEL_TOKEN }}
          vercel link --cwd apps/app --scope=barelylabs --yes --token=${{ secrets.VERCEL_TOKEN }}

      - name: Pull Vercel -- App
        id: vercel-env-app
        run: |
          vercel pull --cwd apps/app --yes --environment=preview --git-branch=${{ needs.git-meta.outputs.git_branch_name }} --token=${{ secrets.VERCEL_TOKEN }} 

          VERCEL_URL=app-git-${{ needs.git-meta.outputs.git_branch_name }}-barelylabs.vercel.app
          sed -i '/VERCEL_URL/d' ./apps/app/.vercel/.env.preview.local
          echo "VERCEL_URL=\"$VERCEL_URL\"" >> ./apps/app/.vercel/.env.preview.local                    
          cp ./apps/app/.vercel/.env.preview.local .env

      - name: Build App Project Artifacts
        run: turbo build:vercel --filter=@barely/app --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy App Preview to Vercel
        id: deploy-app
        run: |
          preview_url=$(vercel deploy --cwd apps/app --prebuilt ${{ needs.git-meta.outputs.vercel_git_metadata }} --token=${{ secrets.VERCEL_TOKEN }})          
          echo preview_url=$preview_url >> $GITHUB_OUTPUT          

          inspect=$(vercel inspect $preview_url --token=${{ secrets.VERCEL_TOKEN }} 2>&1)
          deployment_id=$(echo "$inspect" | grep -m 1 '^    id' | awk '{print $NF}' | cut -d'_' -f 2-)
          inspect_url="https://vercel.com/barelylabs/app/$deployment_id"
          echo "inspect_url=$inspect_url" >> $GITHUB_OUTPUT

    outputs:
      preview_url: ${{ steps.deploy-app.outputs.preview_url }}
      inspect_url: ${{ steps.deploy-app.outputs.inspect_url }}

  #////////////////////////#
  # 🔗 DEPLOY LINK PREVIEW #
  #////////////////////////#

  link-deploy:
    name: vercel preview - link
    needs: [neon-preview, git-meta]
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      TURBO_TEAM: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_LINK_PROJECT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup
        uses: ./tooling/github/setup

      - name: Install Vercel CLI
        run: |
          pnpm install --global vercel@latest
          vercel link --repo --scope=barelylabs --yes --token=${{ secrets.VERCEL_TOKEN }}
          vercel link --cwd apps/link --scope=barelylabs --yes --token=${{ secrets.VERCEL_TOKEN }}

      - name: Pull Vercel -- Link
        id: vercel-env
        run: |
          vercel pull --cwd apps/link --yes --environment=preview --git-branch=${{ needs.git-meta.outputs.git_branch_name }} --token=${{ secrets.VERCEL_TOKEN }}

          VERCEL_URL=link-git-${{ needs.git-meta.outputs.git_branch_name }}-barelylabs.vercel.app
          sed -i '/VERCEL_URL/d' ./apps/link/.vercel/.env.preview.local
          echo "VERCEL_URL=\"$VERCEL_URL\"" >> ./apps/link/.vercel/.env.preview.local                    
          cp ./apps/link/.vercel/.env.preview.local .env

      - name: Build Link Project Artifacts
        run: turbo build:vercel --filter=@barely/link --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Link Preview to Vercel
        id: deploy-link
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_LINK_PROJECT_ID }}
        run: |
          preview_url=$(vercel deploy --cwd apps/link --prebuilt ${{ needs.git-meta.outputs.vercel_git_metadata }} --token=${{ secrets.VERCEL_TOKEN }})          
          echo preview_url=$preview_url >> $GITHUB_OUTPUT          

          inspect=$(vercel inspect $preview_url --token=${{ secrets.VERCEL_TOKEN }} 2>&1)
          deployment_id=$(echo "$inspect" | grep -m 1 '^    id' | awk '{print $NF}' | cut -d'_' -f 2-)
          inspect_url="https://vercel.com/barelylabs/link/$deployment_id"
          echo "inspect_url=$inspect_url" >> $GITHUB_OUTPUT

    outputs:
      preview_url: ${{ steps.deploy-link.outputs.preview_url }}
      inspect_url: ${{ steps.deploy-link.outputs.inspect_url }}

  #//////////////////#
  # 💬 COMMENT ON PR #
  #//////////////////#

  comment:
    name: Comment on Pull Request
    needs: [neon-preview, app-deploy, link-deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Comment on Pull Request
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            ## apps
            :iphone: :rocket: :: ${{ needs.app-deploy.outputs.preview_url }}
            :iphone: :mag: :: ${{ needs.app-deploy.outputs.inspect_url }}

            :link: :rocket: :: ${{ needs.link-deploy.outputs.preview_url }}
            :link: :mag: :: ${{ needs.link-deploy.outputs.inspect_url }}
            ## dbs
            :elephant: :mag: :: https://console.neon.tech/app/projects/${{ secrets.NEON_PROJECT_ID }}/branches/${{ needs.neon-preview.outputs.neon_branch_id }}

  deploy-preview--can-merge:
    needs: [neon-preview, app-deploy, link-deploy]
    runs-on: ubuntu-latest
    permissions:
      actions: read
    steps:
      - name: Transform outcomes
        env:
          NEEDS_JSON: "${{ toJson(needs) }}"
        run: |
          echo "ALL_SUCCESS=$(echo "$NEEDS_JSON" | jq '. | to_entries | map([.value.result == "success", .value.result == "skipped"] | any) | all')" >> $GITHUB_ENV

      - name: Check outcomes
        run: "[ $ALL_SUCCESS = true ]"
