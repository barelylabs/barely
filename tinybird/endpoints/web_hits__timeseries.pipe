NODE timeseries
DESCRIPTION >
    Generate a timeseries for the specified time range, so we can fill in empty data points.
    Defaults to last 7 days.

SQL >

    %
    {% set _single_day = defined(date_from) and day_diff(date_from, date_to) == 0 %}

    with
        {% if defined(date_from) %}
            toStartOfDay(
                toDate(
                    {{
                        Date(
                            date_from,
                            description="Starting day for filtering a date range",
                            required=False,
                        )
                    }}
                )
            ) as start,
        {% else %} toStartOfDay(timestampAdd(today(), interval -7 day)) as start,
        {% end %}
        {% if defined(date_to) %}
            toStartOfDay(
                toDate(
                    {{
                        Date(
                            date_to,
                            description="Finishing day for filtering a date range",
                            required=False,
                        )
                    }}
                )
            ) as end
        {% else %} toStartOfDay(today()) as end
        {% end %}

    {% if _single_day %}
        select
            arrayJoin(
                arrayMap(
                    x -> toDateTime(x),
                    range(
                        toUInt32(toDateTime(start)),
                        toUInt32(timestampAdd(end, interval 1 day)),
                        3600
                    )
                )
            ) as date
    {% else %}
        select
            arrayJoin(
                arrayMap(
                    x -> toDate(x),
                    range(
                        toUInt32(start),
                        toUInt32(timestampAdd(end, interval 1 day)),
                        24 * 3600
                    )
                )
            ) as date
    {% end %}
    where date <= now()



NODE hits
DESCRIPTION >
    Group by sessions and calculate metrics at that level

SQL >

    %
    {% if defined(date_from) and day_diff(date_from, date_to) == 0 %}
        select
            toStartOfHour(timestamp) as date,
            session_id,
            uniq(session_id) as visits,
            count() as pageviews,
            case
                when min(timestamp) = max(timestamp) then 1 else 0
            end as is_bounce,
            max(timestamp) as latest_hit_aux,
            min(timestamp) as first_hit_aux
        from web_hits
        where
            toDate(timestamp) = {{ Date(date_from) }}
            {% if defined(workspaceId) %}
                and workspaceId = {{ String(workspaceId) }}
            {% end %}
            {% if defined(assetId) %}
                and assetId = {{ String(assetId) }}
            {% end %}
            {% if defined(city) %}
                and city = {{ String(city) }}
            {% end %}
            {% if defined(country) %}
                and country = {{ String(country) }}
            {% end %}            
            {% if defined(device) %}
                and device = {{ String(device) }}
            {% end %}
            {% if defined(browser) %}
                and browser = {{ String(browser) }}
            {% end %}
            {% if defined(os) %}
                and os = {{ String(os) }}
            {% end %}
            {% if defined(referer) %} and referer = {{ String(referer) }}
            {% end %}
        group by toStartOfHour(timestamp), sessionId
    {% else %}
        select
            date,
            sessionId,
            uniq(sessionId) as visits,
            countMerge(hits) as pageviews,
            case
                when min(first_hit) = max(latest_hit) then 1 else 0
            end as is_bounce,
            max(latest_hit) as latest_hit_aux,
            min(first_hit) as first_hit_aux
        from web_sessions_mv
        where
            {% if defined(date_from) %} date >= {{ Date(date_from) }}
            {% else %} date >= timestampAdd(today(), interval -7 day)
            {% end %}
            {% if defined(date_to) %} and date <= {{ Date(date_to) }}
            {% else %} and date <= today()
            {% end %}
            {% if defined(workspaceId) %}
                and workspaceId = {{ String(workspaceId) }}
            {% end %}
            {% if defined(assetId) %}
                and assetId = {{ String(assetId) }}
            {% end %}
            {% if defined(city) %}
                and city = {{ String(city) }}
            {% end %}
            {% if defined(country) %}
                and country = {{ String(country) }}
            {% end %}            
            {% if defined(device) %}
                and device = {{ String(device) }}
            {% end %}
            {% if defined(browser) %}
                and browser = {{ String(browser) }}
            {% end %}
            {% if defined(os) %}
                and os = {{ String(os) }}
            {% end %}
            {% if defined(referer) %}
                and referer = {{ String(referer) }}
            {% end %}
            
        group by date, sessionId
    {% end %}



NODE data
DESCRIPTION >
    General KPIs per date, works for both summary metrics and trends charts.

SQL >

        select 
          date,
          uniq(sessionId) as visits,
          sum(pageviews) as pageviews,
          sum(case when latest_hit_aux = first_hit_aux then 1 end) / visits as bounce_rate,
          avg(latest_hit_aux - first_hit_aux) as avg_session_sec
        from 
         hits
        group by
          date



NODE endpoint
DESCRIPTION >
    Join and generate timeseries with metrics

SQL >

        select
          a.date,
          b.visits,
          b.pageviews,
          b.bounce_rate,
          b.avg_session_sec
        from
          timeseries a
        left join data b using date


