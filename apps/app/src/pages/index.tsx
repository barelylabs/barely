import type { NextPage } from 'next';
import Head from 'next/head';
import { signIn, signOut } from 'next-auth/react';
import { trpc } from '../utils/trpc';
import type { inferProcedureOutput } from '@trpc/server';
import type { AppRouter } from '@barely/api';

const PostCard: React.FC<{
	link: inferProcedureOutput<AppRouter['link']['getAll']>[number];
}> = ({ link }) => {
	return (
		<div className='max-w-2xl rounded-lg border-2 border-gray-500 p-4 transition-all hover:scale-[101%]'>
			<h2 className='text-2xl font-bold text-[hsl(280,100%,70%)]'>{link.handle}</h2>
			<p>{link.url}</p>
		</div>
	);
};

const Home: NextPage = () => {
	const { data: session } = trpc.user.current.useQuery();

	// const linkQuery = trpc.link.getAll.useQuery();
	// const artistsQuery = trpc.artist.getByCurrentUser.useQuery();

	return (
		<>
			<Head>
				<title>app.barely.io</title>
				<meta name='description' content='Generated by create-t3-app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<main className='flex h-screen flex-col items-center bg-gradient-to-b from-[#2e026d] to-[#15162c] text-white'>
				<div className='container flex flex-col items-center justify-center gap-12 px-4 py-8'>
					<h1 className='text-5xl font-extrabold tracking-tight sm:text-[5rem]'>
						Create <span className='text-[hsl(280,100%,70%)]'>T3</span> Turbo
					</h1>
					<AuthShowcase />
					{/* Artists:
          {artists.data && (
            <div className="flex flex-col gap-4">
              {artists.data.map((artist) => (
                <div key={artist.id}>{artist.name}</div>
              ))}
            </div>
          )} */}
					{/* <div>events:</div>
          <div className="flex h-[60vh] justify-center overflow-y-scroll px-4 text-2xl">
            {eventQuery.data ? (
              <div className="flex flex-col gap-4">
                {eventQuery.data?.map((l) => {
                  return <div>{l.name}</div>;
                })}
              </div>
            ) : (
              <p>loading links...</p>
            )}
          </div> */}
					artist:
					<br />
					{/* name: {artistsQuery.data?.name}
          <br /> ownerId: {artistsQuery.data?.ownerId} */}
					<br />
					<br />
					links:
					{/* <div className="flex h-[60vh] justify-center overflow-y-scroll px-4 text-2xl">
            {linkQuery.data ? (
              <div className="flex flex-col gap-4">
                {linkQuery.data?.map((l) => {
                  return <PostCard key={l.id} link={l} />;
                })}
              </div>
            ) : (
              <p>loading links...</p>
            )}
          </div> */}
				</div>
			</main>
		</>
	);
};

export default Home;

const AuthShowcase: React.FC = () => {
	const { data: user } = trpc.user.current.useQuery();

	// const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
	//   undefined, // no input
	//   { enabled: !!session?.user },
	// );

	return (
		<div className='flex flex-col items-center justify-center gap-4'>
			{user?.id && (
				<p className='text-center text-2xl text-white'>
					{user && (
						<span>
							Logged in as {user?.id} // {user?.id}
						</span>
					)}
					{/* {secretMessage && <span> - {secretMessage}</span>} */}
				</p>
			)}
			<button
				className='rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20'
				onClick={user ? () => signOut() : () => signIn('discord')}
			>
				{user ? 'Sign out' : 'Sign in'}
			</button>
		</div>
	);
};
